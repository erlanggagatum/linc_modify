[["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll students are humans.\nIf someone studies, then they are a student.\nA person either studys or teaches.\nNo young person teaches.\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is a human or Jerry is a manager.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tsomeone -> Student(someone)\nTEXT:\tA person either studies or teaches.\nFOL:\tsomeone -> (Student(someone) | Teacher(someone))\nTEXT:\tNo young person teaches.\nFOL:\tsomeone -> (Teacher(someone) -> Young(someone))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t-Teacher(Jerry) & -Manager(Jerry)\nTEXT:\tRose is young or a student.\nFOL:\t((Young(Rose) | Student(Rose)) & -Teacher(Rose))\nTEXT:\tRose is a human or Jerry is a manager.\nFOL:\t(Human(Rose) | Manager(Jerry))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nBeijing is the capital of the People's Republic of China.\nBeijing is the world's most populous national capital city.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\n</PREMISES>\n<CONCLUSION>\nBeijing is located in southern China.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapital(Beijing, China, Republic)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tMostPopulousNationalCapitalCity(Beijing)\nTEXT:\tBeijing is located in Northern China.\nFOL:\tLocated(Beijing, Northern, China)\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tHosted(Beijing, 2008, Summer, Olympics, Paralympics)\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL:\tHosted(Beijing, Summer, Winter, Olympics, Paralympics)\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\tAll x. (ConsistentlyRank(x, AsiaPacific) & Among(x, 91, University))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nMonkeypox virus can occur in certain animals, including humans.\nHumans are mammals.\nMammals are animals.\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nPeople feel tired when they get a glu.\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tMonkeypox(Monkeypox)\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\tMonkeypoxVirus(MonkeypoxVirus)\nTEXT:\tHumans are mammals.\nFOL:\tMammal(Human)\nTEXT:\tMammals are animals.\nFOL:\tAnimal(Mammal)\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tall x. (Symptom(x) & (Fever(x) | Headache(x) | MusclePain(x) | Tired(x)))\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tall x. (Tired(x) -> Glu(x))\nTEXT:\tNo one gets flu.\nFOL:\t-all x. (Tired(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tHeinrich Scmidt = Nazi German politician\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tHeeinrich Scmidt = member of the Prussian State Parliament and the Nazi Reichstag\nTEXT:\tHeinrich Schmidt was either German or Russian.\nFOL:\t((Heinrich Scmidt = German) | (Heinrich Scmidt = Russian))\n</EVALUATE>\n\n<PREMISES>\nAll pigs are animals.\nAll pigs are also mammals.\n</PREMISES>\n<CONCLUSION>\nAll pigs are animals and mammals.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll pigs are animals.\nFOL:\tall x. (Pig(x) -> Animal(x))\nTEXT:\tAll pigs are also mammals.\nFOL:\tall x. (Pig(x) -> Mammal(x))\nTEXT:\tAll pigs are animals and mammals.\nFOL:\tall x. (Pig(x) -> (Animal(x) & Mammal(x)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf an animal barks, then Jane does not like it.\nAll dogs are animals that bark.\nIf an animal jumps, then Jane likes it.\nIf an animal has legs, then it jumps.\nIf an animal is terricolous, then it has legs.\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n</PREMISES>\n<CONCLUSION>\nKiKi neither barks nor is a dog.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t((-Jumps(KiKi) & -HasLegs(KiKi)) -> (Terricolous(KiKi) | HasLegs(KiKi)))\nTEXT:\tKiKi neither barks nor is a dog.\nFOL:\t(-Barks(KiKi) & -Dog(KiKi))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNo digital media are analog.\nEvery printed text is analog.\nAll streaming services are digital.\nIf an object is a hardcover book then it is printed text.\nIf 1984 is a streaming service, then 1984 is a hardcover book.\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo digital media are analog.\nFOL:\tall x. (-DigitalMedia(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\tall x. (StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is printed text.\nFOL:\tPrintedText(1984)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nEvery rose given out on TV is on the Bachelor.\nEverything on the Bachelor portrays the lives of real people.\nAll shows portraying the lives of real people are reality TV shows.\nBreaking Bad is not a reality TV show.\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\tsome x. (TV(x) -> (Mon(x, Monday) & (Hour(x, 8) & Rose(x))))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (Rose(x) -> (TV(x) -> OnTheBachelor(x)))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> (Person(x) -> (TV(x) -> OnTheBachelor(x))))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (OnTheBachelor(x) -> (RealityTVShow(x) -> (Person(x) -> (TV(x) -> RealityTVShow(x)))))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tBreaking Bad is on Monday at 8 pm.\nFOL:\t(RealityTVShow(BreakingBad) -> (Mon(Monday, Monday) & (Hour(8, 8) & Rose(Rose))))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll students are humans.\nIf someone studies, then they are a student.\nA person either studys or teaches.\nNo young person teaches.\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nJerry is young.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. (Studies(x) -> (Student(x) & Human(x)))\nTEXT:\tA person either studys or teaches.\nFOL:\t((Studies(Person) & -Teaches(Person)) | (-Studies(Person) & Teaches(Person)))\nTEXT:\tNo young person teaches.\nFOL:\tall x. (Young(x) -> -Teaches(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t((Teaches(Jerry) & -Manager(Jerry)) | (-Teaches(Jerry) & Manager(Jerry)))\nTEXT:\tRose is young or a student.\nFOL:\t(Young(Rose) | Student(Rose))\nTEXT:\tJerry is young.\nFOL:\tYoung(Jerry)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll employees who schedule a meeting with their customers will appear in the company today.\nEveryone who has lunch in the company schedules meetings with their customers.\nEmployees will either have lunch in the company or have lunch at home.\nIf an employee has lunch at home, then he/she is working remotely from home.\nAll employees who are in other countries work remotely from home.\nNo managers work remotely from home.\nJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\n</PREMISES>\n<CONCLUSION>\nJames has lunch in the company.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. ((Meet(x, Cust) & Appear(x, Company)) -> x appears in the company today)\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. ((Meet(x, Cust) & Lunch(x, Company)) -> (x has lunch in the company))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\tall x. ((Lunch(x, Company) | Lunch(x, Home)) -> (Lunch(x, Company) | Lunch(x, Home)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\tall x. ((Lunch(x, Home) -> (Remotely(x, Home) & Working(x, Home))) | (Lunch(x, Company) -> -Remotely(x, Home)))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. ((Countries(x) & -Country(Home)) -> Remotely(x, Home))\nTEXT:\tNo managers work remotely from home.\nFOL:\t-Remotely(Manager, Home)\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t(((James is a manager) & Appear(James, Company)) | (-(James is a manager) & -Appear(James, Company)))\nTEXT:\tJames has lunch in the company.\nFOL:\tLunch(James, Company)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nEvery rose given out on TV is on the Bachelor.\nEverything on the Bachelor portrays the lives of real people.\nAll shows portraying the lives of real people are reality TV shows.\nBreaking Bad is not a reality TV show.\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\t(some x. (On(x, Monday) & At(x, 8) & PM(x) & Given(Rose, x) & On(TV, x)))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. ((Given(Rose, x) & On(TV, x)) -> On(x, Bachelor))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (On(x, Bachelor) -> RealPeople(x))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (RealPeople(x) -> Reality(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-Reality(BreakingBad)\nTEXT:\tIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL:\t((Given(Rose, x) & On(TV, BreakingBad)) -> (On(x, Monday) & At(x, 8) & PM(x)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNo students who work in the library are from the computer science department.\nAll students who have part-time jobs offered by the university are students who work in the library.\nAll students who take the database course are from the computer science department.\nAll students instructed by professor David are taking the database course.\nAll students working in the lab are instructed by professor David.\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJames either takes the database course or has a part-time job offered by the university.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (ComputerScienceDepartment(x) & -Library(x) -> -Student(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (Library(x) -> (Student(x) & UniversityPartTimeJob(x)))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (DatabaseCourse(x) -> InstructedBy(x, David))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (Lab(x) -> InstructedBy(x, David))\nTEXT:\tJames is a student working in the lab.\nFOL:\t(Student(James) & Lab(James))\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-((UniversityPartTimeJob(Jack) & Lab(Jack)) | (UniversityPartTimeJob(Jack) & -Lab(Jack)))\nTEXT:\tJames either takes the database course or has a part-time job offered by the university.\nFOL:\t((DatabaseCourse(James) & -UniversityPartTimeJob(James)) | (DatabaseCourse(James) & UniversityPartTimeJob(James)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nRoderick Strong leads Diamond Mine.\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nImperium has a feud with Diamond Mine.\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tDiamond Mine(x) & ProfessionalWrestlingStable(x) & FormedInWWE(x)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tRoderickStrong(x) -> DiamondMine(x)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tDiamondMine(x) -> (CreedBrothers(x) & IvyNile(x))\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tImperium(x) -> DiamondMine(x)\nTEXT:\tImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL:\t-Imperium(x) -> (-ProfessionalWrestlingStable(x) & (-CreedBrothers(x) & -IvyNile(x)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\n[BG] The Olympic games is a sporting event.\nThe last Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo.\n</PREMISES>\n<CONCLUSION>\nThe last Olympic games were not in Tokyo.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\t[BG] The Olympic games is a sporting event.\nFOL:\t-OlympicGames(OlympicGames) & SportingEvent(OlympicGames)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\tOlympicGames(LastOlympicGames) & Tokyo(LastOlympicGames)\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\tUnitedStates(WonMostMedals) & MostMedals(WonMostMedals) & Tokyo(WonMostMedals)\nTEXT:\tThe last Olympic games were not in Tokyo.\nFOL:\t-Tokyo(LastOlympicGames)\n</EVALUATE>\n\n<PREMISES>\nAll beverages are drink.\nAll fruit juices are beverage.\nAll coffees are beverage.\n</PREMISES>\n<CONCLUSION>\nAll beverages are not fruit juices.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll beverages are drink.\nFOL:\tall x. (Beverage(x) -> Drink(x))\nTEXT:\tAll fruit juices are beverage.\nFOL:\tall x. (FruitJuice(x) -> Beverage(x))\nTEXT:\tAll coffees are beverage.\nFOL:\tall x. (Coffee(x) -> Beverage(x))\nTEXT:\tAll beverages are not fruit juices.\nFOL:\tall x. (Beverage(x) -> -FruitJuice(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf an animal barks, then Jane does not like it.\nAll dogs are animals that bark.\nIf an animal jumps, then Jane likes it.\nIf an animal has legs, then it jumps.\nIf an animal is terricolous, then it has legs.\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -Likes(Jane, x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Animal(x) & Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> Likes(Jane, x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (Legs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> Legs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t(Jumps(KiKi) & -Legs(KiKi)) | (-Jumps(KiKi) & Legs(KiKi))\nTEXT:\tKiKi barks and is a dog.\nFOL:\t((Barks(KiKi) & Dog(KiKi)) | (-Barks(KiKi) & -Dog(KiKi)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nRobert Lewandowski is a striker.\n[BG] Strikers are soccer players.\nRobert Lewandowski left Bayern Munchen.\n[BG] If a player left a team they no longer play for that team.\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(Robert)\nTEXT:\t[BG] Strikers are soccer players.\nFOL:\tall x. SoccerPlayer(x) -> Strikers(x)\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tall x. (Player(x) & Team(x) -> -Team(x))\nTEXT:\t[BG] If a player left a team they no longer play for that team.\nFOL:\tall x. (Player(x) & Team(x) -> -Plays(x, y) -> -Team(y))\nTEXT:\tRobert Lewandowski is a star.\nFOL:\t-Striker(Robert)\n</EVALUATE>\n\n<PREMISES>\nAll parents have at least one child.\n[BG] If a person has at least one child they are a parent.\nAll parents have a child named Sally.\n</PREMISES>\n<CONCLUSION>\nAll parents have a child named Sarah.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll parents have at least one child.\nFOL:\tall x. (Parent(x) -> HasChild(x))\nTEXT:\t[BG] If a person has at least one child they are a parent.\nFOL:\tall x. (HasChild(x) -> Parent(x))\nTEXT:\tAll parents have a child named Sally.\nFOL:\tall x. (Parent(x) -> HasChild(x, y) & Name(y, Sally))\nTEXT:\tAll parents have a child named Sarah.\nFOL:\tall x. (Parent(x) -> HasChild(x, y) & Name(y, Sarah))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll students are humans.\nIf someone studies, then they are a student.\nA person either studys or teaches.\nNo young person teaches.\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nJerry is not young.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tsomeone -> Student(someone)\nTEXT:\tA person either studies or teaches.\nFOL:\t((Student(Person) & -Teacher(Person)) | (-Student(Person) & Teacher(Person)))\nTEXT:\tNo young person teaches.\nFOL:\tno x. (Young(x) & Teacher(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t(-Teacher(Jerry) & -Manager(Jerry))\nTEXT:\tRose is young or a student.\nFOL:\t(Young(Rose) | Student(Rose))\nTEXT:\tJerry is not young.\nFOL:\t-Young(Jerry)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\n[BG] Some mammals have teeth.\nPlatypus have no teeth.\nPlatypus are mammals.\nHumans have teeth.\n</PREMISES>\n<CONCLUSION>\nHumans are mammals.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tSome mammals have teeth.\nFOL:\texists x. (Mammals(x) & Teeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\t-Teeth(Platypus)\nTEXT:\tPlatypus are mammals.\nFOL:\tMammals(Platypus)\nTEXT:\tHumans have teeth.\nFOL:\tTeeth(Humans)\nTEXT:\tHumans are mammals.\nFOL:\tMammals(Humans)\n</EVALUATE>\n\n<PREMISES>\n[BG] Male and Female humans have different names.\nA male human named <NAME> has a beard.\nA female human named <NAME> has a beard.\n</PREMISES>\n<CONCLUSION>\nJohn has a beard.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tMale and Female humans have different names.\nFOL:\texists x y. (Male(x) & Female(y) & (Different(x,y) & Human(x)))\nTEXT:\tA male human named <NAME> has a beard.\nFOL:\tMale(John) & Human(John) & (Beard(John) & Name(John,x) & Name(y,John))\nTEXT:\tA female human named <NAME> has a beard.\nFOL:\tFemale(Mary) & Human(Mary) & (Beard(Mary) & Name(Mary,y) & Name(x,Mary))\nTEXT:\tJohn has a beard.\nFOL:\tBeard(John)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nAll of New Vessel Press's published books are in English.\nNeapolitan Chronicles is a book published by New Vessel Press.\nNeapolitan Chronicles was translated from Italian.\nPalace of Flies is a book published by New Vessel Press.\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tNew Vessel Press is a PublishingHouse(x)\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBy(x, New Vessel Press) & Language(x, English))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tNeapolitanChronicles is a Book(x)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tNeapolitanChronicles is translatedFrom(Italian, x)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPalaceOfFlies is a Book(x)\nTEXT:\tHarry Potter was published by New Vessel Press.\nFOL:\tHarryPotter is a Book(x)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNo bakery is spicy.\nAll cupcakes are bakeries.\nAll hotpots are spicy.\nAll products of Baked by Melissa are cupcakes.\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo bakery is spicy.\nFOL:\tall x. (-Spicy(x) -> -Bakery(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> ((Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))))\nTEXT:\tDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL:\t(Cupcake(DriedThaiChilies) & BakedByMelissa(DriedThaiChilies))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\n[BG] Books contain tons of knowledge.\n[BG] When a person reads a book, that person gains knowledge.\n[BG] If a person gains knowledge, they become smarter.\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\n</PREMISES>\n<CONCLUSION>\nHarry is smarter than before.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\t[BG] Books contain tons of knowledge.\nFOL:\tall x. (Book(x) -> -Thin(x))\nTEXT:\t[BG] When a person reads a book, that person gains knowledge.\nFOL:\tall x y. (Person(x) & Reading(x, y) -> Knowledge(y))\nTEXT:\t[BG] If a person gains knowledge, they become smarter.\nFOL:\tall x y. (Person(x) & Knowledge(y) -> Smarter(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tPerson(Harry) & Reading(Harry, Book(Walden))\nTEXT:\tHarry is smarter than before.\nFOL:\tSmarter(Harry) & -Smarter(Harry)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nSteinhauer participated in the 1992 du Maurier Classic.\nThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\t(1992duMaurierClassicWinner(Steinhauer))\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\t(ParticipatedIn(Steinhauer, 1992duMaurierClassic))\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\t(1992duMaurierClassicLeaderboard(leaderboard) & (6(length(leaderboard)) -> 1(length(leaderboard)) & Belgium(1(1992duMaurierClassicLeaderboard(leaderboard))))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\t((Belgium(Descampe) & 1992duMaurierClassicLeaderboard(leaderboard)) & (Descampe(leaderboard) | (1992duMaurierClassicLeaderboard(leaderboard) & Belgium(Descampe))))\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (ParticipatedIn(x, 1992duMaurierClassic) -> 1992duMaurierClassicLeaderboard(leaderboard) & (Descampe(leaderboard"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals.\nAll animals from Australia are loved by tourists.\nAll quokka are animals from Australia.\nAll of Max's favorite animals are very fluffy.\nAll of Max's favorite animals love to sleep.\nIf a koala is very fluffy, then the koala is not a quokka.\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (Loved(x, Tourist) -> Favorite(x, Max))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (Animal(x) & -Australia(x) -> Loved(x, Tourist))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) & Australia(x) -> Animal(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (Favorite(x, Max) & VeryFluffy(x) -> VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (Favorite(x, Max) & Sleep(x) -> Sleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\t((VeryFluffy(Koala) & -Quokka(Koala)) | (-VeryFluffy(Koala) & Quokka(Koala)))\nTEXT:\tKoalas love to sleep.\nFOL:\tall x. (Koala(x) -> Sleep(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nBeijing is the capital of the People's Republic of China.\nBeijing is the world's most populous national capital city.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\n</PREMISES>\n<CONCLUSION>\nBeijing is the second largest Chinese city by urban population.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tCapitol(Beijing)\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\t(MostPopulousNationalCapitalCity(Beijing) -> WorldsMostPopulousNationalCapitalCity(Beijing))\nTEXT:\tBeijing is located in Northern China.\nFOL:\t(NorthernChina(Beijing) -> LocatedIn(Beijing, NorthernChina))\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\t(2008SummerOlympics(Beijing) & 2008SummerParalympics(Beijing) -> HostedThe(Beijing, 2008SummerOlympics, 2008SummerParalympics))\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\t(SummerAndWinterOlympics(Beijing) & SummerAndWinterParalympics(Beijing) -> HostedBothThe(Beijing, SummerAndWinterOlympics, SummerAndWinterParalympics))\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\t(91Universities(Beijing) -> AmongTheBestInTheAsiaPacificAndTheWorld(Beijing's 91 univers"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll Romance languages are Indo-European languages.\nThe Romance languages are a language family.\nAll languages within a language family are related to each other.\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tThere exists x. RomanceLanguage(x) & LanguageFamily(x)\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. LanguageFamily(x) & (all y. x -> RomanceLanguage(y) & Related(x,y))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\t((RomanceLanguage(French) & RomanceLanguage(Spanish)) | (-RomanceLanguage(French) & -RomanceLanguage(Spanish)))\nTEXT:\tGerman is related to Spanish.\nFOL:\t(all x. (German(x) & Related(German,Spanish)) | -Related(German,Spanish))\nTEXT:\tBasque is not related to any other language.\nFOL:\t-Related(Basque,x)\nTEXT:\tGerman is a Romance language.\nFOL:\tRomanceLanguage(German)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA hawk never lands.\nSome birds are hawks.\n</PREMISES>\n<CONCLUSION>\nAll birds land\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tA hawk never lands.\nFOL:\t-Lands(Hawk)\nTEXT:\tSome birds are hawks.\nFOL:\tsome x. (Hawk(x) & Bird(x))\nTEXT:\tAll birds land.\nFOL:\tall x. (Bird(x) -> Lands(x))\n</EVALUATE>\n\n<PREMISES>\nAll men are mortal.\nEvery man is mortal.\n</PREMISES>\n<CONCLUSION>\nNo man is immortal.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll men are mortal.\nFOL:\tall x. (Man(x) -> Mortal(x))\nTEXT:\tEvery man is mortal.\nFOL:\tall x. (Man(x) -> Mortal(x))\nTEXT:\tNo man is immortal.\nFOL:\tno x. (Man(x) & Immortal(x))\n</EVALUATE>\n\n<PREMISES>\nAll people are mortal.\nSome people are not mortal.\n</PREMISES>\n<CONCLUSION>\nNo people are immortal.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll people are mortal.\nFOL:\tall x. (Person(x) -> Mortal(x))\nTEXT:\tSome people are not mortal.\nFOL:\tsome x. (Person(x) & -Mortal(x))\nTEXT:\tNo people are immortal.\nFOL:\tno x. (Person(x) & Immortal(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nAll people who work regularly and often at home visit the office supply store regularly.\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\n</PREMISES>\n<CONCLUSION>\nRemy has a fully stocked and impressive home office and also visits the office supply store regularly.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tsome x. (DesktopMonitor(x) -> (WorkRegularlyAndOftenAtHome(x) & (OwnHome(x))))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (HomeOfficeFullyStockedAndImpressive(x) -> (OwnHome(x) -> (DesktopMonitor(x) -> OwnHome(x))))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> (FreeTimeTidyAndOrganize(x) & OwnHome(x)))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (WorkRegularlyAndOftenAtHome(x) -> (VisitOfficeSupplyStore(x)))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tsome x. (FreeTimeTidyAndOrganize(x) -> (-BedLateAndWakeUpEveryDayAfterNo"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nAll students who want to have a long vacation love summer the most.\nEmma's favorite season is summer.\nMia's favorite season is not the same as Emma's.\nJames wants to have a long vacation.\n</PREMISES>\n<CONCLUSION>\nMia's favorite season is spring.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\t[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\t-Seasons(Spring, Summer, Fall, Winter)\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantLongVacation(x) & (Summer(FavoriteSeason(x)) <=> Most(Summer(FavoriteSeason(x)), Love(FavoriteSeason(x), Summer(x)))))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tEmma's(FavoriteSeason(Emma)) = Summer(FavoriteSeason(Emma))\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\tMia's(FavoriteSeason(Mia))!= Emma's(FavoriteSeason(Emma))\nTEXT:\tJames wants to have a long vacation.\nFOL:\tWantLongVacation(James)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nYale University is a private Ivy League research university.\nYale University moved to New Haven in 1716.\nYale university's endowment was valued at $42.3 billion.\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\n</PREMISES>\n<CONCLUSION>\nA private Ivy League research university moved to New Haven.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tYale University is a private Ivy League research university.\nFOL:\tPrivate(University) & (IvyLeague(University) & ResearchUniversity(University))\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tMoved(University, NewHaven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tValued(Endowment(University), 42300000000.0)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\t((Organized(University) & 27(ConstituentCollegesAndSchools)) & (ResidentialColleges(ConstituentCollegesAndSchools) & (YaleGraduateSchoolOfArtsAndSciences(ConstituentCollegesAndSchools) & TwelveProfessionalSchools(ConstituentCollegesAndSchools))))\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Mur"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n</PREMISES>\n<CONCLUSION>\nCoco Gauff is among the most active players in major tennis.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. ((RankHighly(x) & AmongMostActive(x)) -> MostActive(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. ((Loser(x) & -Loser(IgaSwiatek) & RankHighly(x)) -> RankHighly(x))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. ((FemaleTennisPlayer(x) & AtRolandGarros2022(x) & -Loser(IgaSwiatek) & Loser(x)) -> Loser(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\t(-FemaleTennisPlayer(x) & -MaleTennisPlayer(x) & AtRolandGarros2022(x) & (FemaleTennisPlayer(x) | MaleTennisPlayer(x)))\nTEXT:\tAll male tenn"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n</PREMISES>\n<CONCLUSION>\nCoco Gauff has lost to Rafael Nadal.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. ((WTAHighlyRanked(x) -> ActiveInMajorTennis(x)) & MostActive(x))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (-(Losing(x,Iga_\u015awi\u0105tek) & WTAHighlyRanked(x)))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemaleTennisPlayer(x) & Losing(x,Iga_\u015awi\u0105tek))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\t((FemaleTennisPlayer(x) | MaleTennisPlayer(x)) & Roland_Garros_2022(x))\nTEXT:\tAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL:\tall x. (MaleTennisPlayer(x) & Roland_Gar"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNo digital media are analog.\nEvery printed text is analog.\nAll streaming services are digital.\nIf an object is a hardcover book then it is printed text.\nIf 1984 is a streaming service, then 1984 is a hardcover book.\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo digital media are analog.\nFOL:\tall x. (DigitalMedia(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tall x. (HardcoverBook(x) -> PrintedText(x))\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\tall x. (StreamingService(1984) -> HardcoverBook(1984))\nTEXT:\t1984 is not a streaming service.\nFOL:\t-StreamingService(1984)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals.\nAll animals from Australia are loved by tourists.\nAll quokka are animals from Australia.\nAll of Max's favorite animals are very fluffy.\nAll of Max's favorite animals love to sleep.\nIf a koala is very fluffy, then the koala is not a quokka.\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. (LovedBy(x, Tourist) -> FavoriteAnimal(Max, x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (Australia(x) & LovedBy(x, Tourist))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) & Australia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (FavoriteAnimal(Max, x) & VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (FavoriteAnimal(Max, x) & Sleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\t((VeryFluffy(Koala) & -Quokka(Koala)) | (-VeryFluffy(Koala) & Quokka(Koala)))\nTEXT:\tIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL:\t((Quokka(Koala) & ((Sleep(Koala) | VeryFluffy(Koala)))) | (-Quokka(Koala) & ((Sleep(Koala) | VeryFluffy(Koala)))))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nMike is an international student.\nMike needs to apply for CPT if he wants to work in the US.\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\tall x. ((F1Visa(x) | J1Visa(x)) & (InternationalStudent(x) & -WorkInUS(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\tall x. (((InternationalStudent(x) & F1Visa(x) & WorkInUS(x)) & (CPT(x) | OPT(x))) | ((InternationalStudent(x) & F1Visa(x) & -WorkInUS(x)) & OPT(x)))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudent(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\tall x. ((Mike & WorkInUS(x) & (CPT(x) | OPT(x))) | (-Mike & WorkInUS(x) & OPT(x)))\nTEXT:\tMike has a J1 visa.\nFOL:\tall x. (Mike & J1Visa(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nMichael is a man who is taller than everyone else in his class.\nIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nPeter is a man who is taller than Michael.\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nMichael cannot block Windy's shooting.\nEvery shooter who can jump when shooting is a great shooter.\n</PREMISES>\n<CONCLUSION>\nPeter can block Windy's shooting.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x. ((all y. (Taller(x, y) & Taller(y, z) -> Taller(x, z))) & Taller(Michael, x))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x. (Taller(Michael, x) & ((all y. (Taller(Michael, y) & -Michael(y)) -> Taller(Michael, x)) & -Michael(x)))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x. ((all y. (Taller(x, y) & Taller(y, z) -> Taller(x, z))) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tall x. (Taller(Peter, x) & ((all y. (Taller(Peter, y) & -Peter(y)) -> Taller(Peter, x)) & -Peter(x)))\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (all y. (Michael(x) & ((-Jump(y) & -Michael(y)) | (Jump(y) & -Jump(x) & -Michael(y)))) & -Jump(x) -> -Jump(y))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\tMichael("], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tBarutinCove(BarutinCove) & BulgarianSettlement(Barutin)\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tBarutinCove(BarutinCove) & Coast(BarutinCove,SnowIsland) & Southwest(Coast)\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\tTheSouthShetlandIslands(TheSouthShetlandIslands) & SnowIsland(TheSouthShetlandIslands) & GreenwichIsland(TheSouthShetlandIslands) & DeceptionIsland(TheSouthShetlandIslands)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tTheSouthShetlandIslands(TheSouthShetlandIslands) & PartOfAntarctica(TheSouthShetlandIslands)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. (all y. (xLocatedIn(x,y) & yLocatedIn(y,z)) -> xLocatedIn(x,z))\nTEXT:\tBarutin is not located in Antarctica.\nFOL:\t-PartOfAntarctica(Barutin)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\n[BG] The Olympic games is a sporting event.\nThe last Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo.\n</PREMISES>\n<CONCLUSION>\nThe world championships is a sporting event.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\t[BG] The Olympic games is a sporting event.\nFOL:\t[all x. (OlympicGames(x) -> SportingEvent(x))]\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\t[TheLast(OlympicGames) & In(OlympicGames, Tokyo)]\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\t[Won(UnitedStates, Medals) & Most(Medals) & In(Medals, Tokyo)]\nTEXT:\tThe world championships is a sporting event.\nFOL:\t[all x. (WorldChampionships(x) -> SportingEvent(x))]\n</EVALUATE>\n\n<PREMISES>\nNo food is made from chocolate.\nAll food is not made from chocolate.\nAll food is not made from chocolate.\nNo food is made from chocolate.\nAll food is made from flour.\nAll chocolate is made from cocoa beans.\n</PREMISES>\n<CONCLUSION>\nAll food is made from flour.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo food is made from chocolate.\nFOL:\t-all x. (Food(x) -> MadeFrom(x, Chocolate))\nTEXT:\tAll food is not made from chocolate.\nFOL:\t-all x. (Food(x) & MadeFrom(x, Chocolate))\nTEXT:\tAll food is not made from chocolate.\nFOL:\t-all x. (Food(x) & MadeFrom(x, Chocolate))\nTEXT:\tNo food is made from chocolate.\nFOL:\t-all x. (Food(x) -> MadeFrom(x, Chocolate))\nTEXT:\tAll food is made from flour.\nFOL:\tall x. (Food(x) -> MadeFrom(x, Flour))\nTEXT:\tAll chocolate is made from cocoa beans.\nFOL:\tall x. (Chocolate(x) -> MadeFrom"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll students are humans.\nIf someone studies, then they are a student.\nA person either studys or teaches.\nNo young person teaches.\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nIt is not true that Rose is a student and Jerry is a human.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\tall x. ((Studies(x) & Student(x)) | (-Studies(x) & -Student(x)))\nTEXT:\tA person either studys or teaches.\nFOL:\t((Studies(Person) & -Teaches(Person)) | (-Studies(Person) & Teaches(Person)))\nTEXT:\tNo young person teaches.\nFOL:\t(-Young(Person) & Teaches(Person))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t(-Teaches(Jerry) & -Manager(Jerry))\nTEXT:\tRose is young or a student.\nFOL:\t(Young(Rose) | Student(Rose))\nTEXT:\tIt is not true that Rose is a student and Jerry is a human.\nFOL:\t(((-Student(Rose) & -Human(Jerry)) & -(-Student(Jerry) & -Human(Rose))) | ((-Student(Rose) & -Human(Jerry)) & (-Student(Jerry) & -Human(Rose))))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\n[BG] Some mammals have teeth.\nPlatypus have no teeth.\nPlatypus are mammals.\nHumans have teeth.\n</PREMISES>\n<CONCLUSION>\nPlatypus are mammals with no teeth.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\t[BG] Some mammals have teeth.\nFOL:\tsome x. (Mammal(x) & Teeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\t-Teeth(Platypus)\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Platypus(x) & Mammal(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Human(x) & Teeth(x))\nTEXT:\tPlatypus are mammals with no teeth.\nFOL:\tall x. (Platypus(x) & Mammal(x) & -Teeth(x))\n</EVALUATE>\n\n<PREMISES>\nAll good things are environment-friendly.\nAll dispensable things are good.\nAll woodware is dispensable.\nAll paper is woodware.\nAll paper is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is environment-friendly.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll good things are environment-friendly.\nFOL:\tall x. (Good(x) -> EnvironmentFriendly(x))\nTEXT:\tAll dispensable things are good.\nFOL:\tall x. (Dispensable(x) -> Good(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tAll paper is environment-friendly.\nFOL:\tall x. (Paper(x) -> EnvironmentFriendly(x))\nTEXT:\tA worksheet is environment-friendly.\nFOL:\tEnvironmentFriendly(Worksheet)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll cows are bovines.\nSome pets are cows.\nIf something is a bovine, then it is domesticated.\nNo domesticated animals are alligators.\nTed is an aligator.\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\tsome x. (Pet(x) -> Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\n</EVALUATE>\n\n<PREMISES>\nSome pets are cows.\nNo dogs are cows.\nSome dogs are pets.\nNo dogs are pets.\n</PREMISES>\n<CONCLUSION>\nSome dogs are not cows.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tSome pets are cows.\nFOL:\tsome x. (Pet(x) -> Cow(x))\nTEXT:\tNo dogs are cows.\nFOL:\tall x. (Dog(x) -> -Cow(x))\nTEXT:\tSome dogs are pets.\nFOL:\tsome x. (Dog(x) -> Pet(x))\nTEXT:\tNo dogs are pets.\nFOL:\tall x. (Dog(x) -> -Pet(x))\nTEXT:\tSome dogs are not cows.\nFOL:\tall x. (Dog(x) -> -Cow(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\t(Barutin(Barutin_Cove) & -Bulgarian(Barutin_Cove))\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\t(Barutin_Cove & Southwest(Barutin_Cove) & Coast(Snow_Island, -Southwest(Barutin_Cove)))\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\t(Snow_Island & Greenwich_Island & Deception_Island & -Antarctic(Snow_Island) & -Antarctic(Greenwich_Island) & -Antarctic(Deception_Island))\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\t-Antarctic(Snow_Island) & -Antarctic(Greenwich_Island) & -Antarctic(Deception_Island)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\t((Located(A, B) & Located(B, C)) -> Located(A, C))\nTEXT:\tThere is at least one cove in Antarctica named after a place in Bulgaria.\nFOL:\t(-Antarctic(Cove) & (Barutin(Cove) & Bulgarian(Cove)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nIf the stock price is volatile, then it is not suitable for a retirement fund.\nSome companies\u2019 stocks are growth companies\u2019 stocks.\nAll mature companies\u2019 stocks are suitable for a retirement fund.\nKO is a mature company\u2019s stock.\n</PREMISES>\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompany(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(Price(x)) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\tsome x. (GrowthCompany(x) -> x == Stock)\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompany(Stock)\nTEXT:\tIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL:\t((GrowthCompany(Stock) | Volatile(Price(Stock))) -> (-Stock(Stock) & -Volatile(Price(Stock))))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll rabbits are cute.\nSome turtles exist.\nAn animal is either a rabbit or a squirrel.\nIf something is skittish, then it is not still.\nAll squirrels are skittish.\nRock is still.\n</PREMISES>\n<CONCLUSION>\nRock is not a turtle.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\tsome x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\t((Rabbit(Animal) & -Squirrel(Animal)) | (-Rabbit(Animal) & Squirrel(Animal)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is not a turtle.\nFOL:\t-Turtle(Rock)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nIf people chaperone high school dances, then they are not students who attend the school.\nAll people who are inactive and disinterested members of their community chaperone high school dances.\nAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\n</PREMISES>\n<CONCLUSION>\nBonnie performs in school talent shows often.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. (PerformInSchoolTalentShowsOften(x) -> (Attend(x) & VeryEngagedWithSchoolEvents(x)))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\t(PerformInSchoolTalentShowsOften(P) | (InactiveAndDisinterestedMemberOfTheirCommunity(P)))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsTheSchool(x))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. ((YoungChildAndTeenager(x) & WishToFutherTheirAcademicCareersAndEducationalOpportunities(x)) -> StudentWhoAttendsTheSchool(x))\nTEXT:\tBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll cows are bovines.\nSome pets are cows.\nIf something is a bovine, then it is domesticated.\nNo domesticated animals are alligators.\nTed is an aligator.\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\tsome x. (Pet(x) -> Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tall x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tall x. (Domesticated(x) -> -Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAlligator(Ted)\nTEXT:\tTed is a pet.\nFOL:\tPet(Ted)\n</EVALUATE>\n\n<PREMISES>\nThe Earth is not a planet.\nThe Moon is not a planet.\n</PREMISES>\n<CONCLUSION>\nThe Earth is not the Moon.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tThe Earth is not a planet.\nFOL:\t-Planet(Earth)\nTEXT:\tThe Moon is not a planet.\nFOL:\t-Planet(Moon)\nTEXT:\tThe Earth is not the Moon.\nFOL:\t-Earth(Moon)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\n[BG] Some mammals have teeth.\nPlatypus have no teeth.\nPlatypus are mammals.\nHumans have teeth.\n</PREMISES>\n<CONCLUSION>\nPlatypus are reptiles.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\t[BG] Some mammals have teeth.\nFOL:\texists x. (Mammal(x) & Teeth(x))\nTEXT:\tPlatypus have no teeth.\nFOL:\tno x. (Teeth(x) & Platypus(x))\nTEXT:\tPlatypus are mammals.\nFOL:\tall x. (Mammal(x) -> Platypus(x))\nTEXT:\tHumans have teeth.\nFOL:\tall x. (Teeth(x) -> Human(x))\nTEXT:\tPlatypus are reptiles.\nFOL:\tno x. (Teeth(x) & Mammal(x))\nTEXT:\tPlatypus are reptiles.\nFOL:\tno x. (Teeth(x) & Mammal(x))\n</EVALUATE>\n\n<PREMISES>\nSome races of humans are not native to America.\nAll natives of America are humans.\nSome races of humans are native to America.\n</PREMISES>\n<CONCLUSION>\nAll natives of America are races of humans.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tSome races of humans are not native to America.\nFOL:\texists x. (Human(x) & -Native(x))\nTEXT:\tAll natives of America are humans.\nFOL:\tall x. (Human(x) -> Native(x))\nTEXT:\tSome races of humans are native to America.\nFOL:\texists x. (Human(x) & Native(x))\nTEXT:\tAll natives of America are races of humans.\nFOL:\tall x. (Human(x) -> Native(x))\nTEXT:\tAll natives of America are races of humans.\nFOL:\tall x. (Human(x) -> Native(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nSome restaurants that do not provide take-out service receive many negative reviews.\nAll restaurants that are popular among local residents have ratings greater than 9.\nSubway has a rating greater than 9 or is popular among local residents.\n</PREMISES>\n<CONCLUSION>\nSubway does not provide take-out service.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tsome x. (Restaurant(x) & ListedInYelpsRec(x) -> -ManyNegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (AllRestaurantsWithRatingGreaterThan9(x) -> ListedInYelpsRec(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\tsome x. ((NotProvidingTakeOutService(x) & Restaurant(x)) -> ManyNegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. ((PopularAmongLocalResidents(x) & Restaurant(x)) -> AllRestaurantsWithRatingGreaterThan9(x))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t(AllRestaurantsWithRatingGreaterThan9(Subway) | PopularAmongLocalResidents(Subway))\nTEXT:\tSubway does not provide take-out service.\nFOL:\t-NotProvidingTakeOutService(Subway)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nJuan de Onate visited the Picuris Mountains.\nThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nThere are no mountain ranges in texas that have mines which have been donated.\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL:\t((MountainRange(PicurisMountains) & (TexasOrNewMexico(PicurisMountains))) | (MountainRange(PicurisMountains) & (TexasOrNewMexico(PicurisMountains))))\nTEXT:\tJuan de Onate visited the Picuris Mountains.\nFOL:\t(PicurisMountains = JuanDeOnate)\nTEXT:\tThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL:\t(HardingPegmatiteMine(LocatedInThePicurisMountains) & Donated(HardingPegmatiteMine))\nTEXT:\tThere are no mountain ranges in texas that have mines which have been donated.\nFOL:\t((MountainRange(Texas) & (Mines(Texas) & Donated(Mines))) | (MountainRange(Texas) & (Mines(Texas) & Donated(Mines))))\nTEXT:\tJuan de Onate visited a mountain range in Texas.\nFOL:\t(PicurisMountains = JuanDeOnate)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll people who have a wedding are people who have at least one child.\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nSome weddings in July are well-attended.\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\n</PREMISES>\n<CONCLUSION>\nJohn has a wedding that is well-attended.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. ((Wedding(x) & -AtLeastOneChild(x)) | (AtLeastOneChild(x) & -Wedding(x)))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. ((TravelToParis(x) & -Honeymoon(x)) | (Honeymoon(x) & -Wedding(x)))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. ((JulyWedding(x) & -TravelToParis(x)) | (TravelToParis(x) & JulyWedding(x)))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\tsome x. ((JulyWedding(x) & WellAttended(x)) | (-JulyWedding(x) & WellAttended(x)))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tall x. ((AtLeastOneChild(x) & (TravelToParis(x) & -Honeymoon(x) & -Wedding(x))) | (-AtLeastOneChild(x) & (-TravelToParis(x) & Honeymoon(x) & Wedding(x))))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nAll severe cancers are deadly diseases.\nBile duct cancer is a severe cancer.\nAll Cholangiocarcinoma is bile duct cancer.\nNo one with mild flu has a low survival rate.\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (Disease(x) -> SurvivalRate(x) = Low)\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> Disease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tSevereCancer(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. ((-Flu(x) & SurvivalRate(x) = Low) -> False)\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\t((BileDuctCancer(ColorectalCancer) & SurvivalRate(ColorectalCancer) = Low) -> -BileDuctCancer(ColorectalCancer))\nTEXT:\tIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL:\t(BileDuctCancer(ColorectalCancer) | Cholangiocarcinoma(ColorectalCancer)) & ("], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nIf people have siblings who are the same age, then they are twins or triplets.\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\n</PREMISES>\n<CONCLUSION>\nLuke spends a lot of time hanging out and playing with his siblings.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (TwinOrTriplet(x) -> all y. (Siblings(x,y) & (all z. (SameAge(y,z) -> TwinOrTriplet(x)))))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. (Siblings(x,y) & SameAge(y,z) -> TwinOrTriplet(x))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (ComplainAbout(x) & Siblings(x,y) -> SameAge(y,z))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHome(x) -> all y. (FamilyMembers(x,y) -> -Bonds(x,y)))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (all y. (Siblings(x,y) & (HangingOut(x) | Playing(x))) -> -LiveAtHome(x))\nTEXT:\tLuke is either both a twin or triplet and develops"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nIf the stock price is volatile, then it is not suitable for a retirement fund.\nSome companies\u2019 stocks are growth companies\u2019 stocks.\nAll mature companies\u2019 stocks are suitable for a retirement fund.\nKO is a mature company\u2019s stock.\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompany(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tsome x. (Volatile(x) -> -Suitable(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\tsome x. (GrowthCompany(x) -> -Volatile(x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompany(x) -> Suitable(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompany(KO)\nTEXT:\tKO is a company stock and a growth company\u2019s stock.\nFOL:\t(GrowthCompany(KO) & Company(KO))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nMonkeypox virus can occur in certain animals, including humans.\nHumans are mammals.\nMammals are animals.\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nPeople feel tired when they get a glu.\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tMonkeypox(InfectiousDisease)\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\tMonkeypoxVirus(x) & (Occurs(x) & x. (Animal(x) & (Mammals(x) | Humans(x))))\nTEXT:\tHumans are mammals.\nFOL:\tHumans(Mammals)\nTEXT:\tMammals are animals.\nFOL:\tMammals(Animal)\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tall x. (Sympton(x) & (Fever(x) | Headache(x) | MusclePain(x) | FeelingTired(x) | x. (OtherSymptom(x) & FeelingTired(x))))\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tFeelingTired(People) & Getting(People) & Glu(x) & ((Animal(x) & (Mammals(x) | Humans(x))) | (Virus(x) & (MonkeypoxVirus(x) | x. (OtherVirus(x) & MonkeypoxVirus(x))))))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf a cartoon character is funny, then it is popular.\nIf a cartoon character is ugly, then it is not popular.\nIf a cartoon character is loved by children, then it is funny.\nIf a cartoon character is from The Simpsons, then it is loved by children.\nIf a cartoon character is yellow, then it is from The Simpsons.\nBen is either from The Simpsons or funny.\n</PREMISES>\n<CONCLUSION>\nBen is loved by children.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t((FromTheSimpsons(Ben) & -Funny(Ben)) | (-FromTheSimpsons(Ben) & Funny(Ben)))\nTEXT:\tBen is loved by children.\nFOL:\tLovedByChildren(Ben)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nAll games in the Top 10 list are made by Japanese game companies.\n[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nThe Legend of Zelda sold more than one million copies.\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\tJapaneseGameCompany(TheLegendOfZelda)\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Game(x) & ((Top10(x) & JapaneseGameCompany(x)) | (-Top10(x) & -JapaneseGameCompany(x))))\nTEXT:\tIf a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. (Game(x) -> ((Sales(x) > 1000000) & Top10(x)))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSales(TheLegendOfZelda) > 1000000\nTEXT:\tThe Legend of Zelda is not in the Top 10 list.\nFOL:\t-(Top10(TheLegendOfZelda) | JapaneseGameCompany(TheLegendOfZelda))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nAll people who are Grand Slam champions are professional tennis players.\nAll Oscar-nominated actors are celebrities.\nAll professional tennis players are athletes.\nIf a person is a celebrity then they are well paid.\nIf a person is an athlete then they are famous.\nAll well-paid people live in tax havens.\nIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\n</PREMISES>\n<CONCLUSION>\nDjokovic is a Grand Slam champion.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\t((GrandSlamChampion(x) | OscarNominatedActor(x)) & -((~GrandSlamChampion(x) & ~OscarNominatedActor(x))))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\t((Celebrity(x) -> WellPaid(x)) & -((~Celebrity(x) & ~WellPaid(x))))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\t((Athlete(x) -> Famous(x)) & -((~Athlete(x) & ~Famous(x))))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(((Famous(Djokovic) & Athlete(Djok"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tPlungers suck.\nFOL:\tPlunger(x) => Suck(x)\nTEXT:\tVacuums suck.\nFOL:\tVacuum(x) => Suck(x)\nTEXT:\tVampires suck.\nFOL:\tVampire(x) => Suck(x)\nTEXT:\tSpace is a vacuum.\nFOL:\tSpace(x) => Vacuum(x)\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tDuster(x) => (-Suck(x) & HouseholdAppliance(x))\nTEXT:\tSpace is a vampire.\nFOL:\tSpace(x) => Vampire(x)\n</EVALUATE>\n\n<PREMISES>\nNo good thing is dispensable.\nNo vacuum is good.\nAll vacuums are suckers.\nA plunger is a good vacuum.\nAll good things are good vacuums.\nA vacuum is either a plunger or is a good vacuum.\n</PREMISES>\n<CONCLUSION>\nA duster is not a good thing.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo good thing is dispensable.\nFOL:\tall x. (Good(x) & -Dispensable(x))\nTEXT:\tNo vacuum is good.\nFOL:\tall x. (Vacuum(x) & -Good(x))\nTEXT:\tAll vacuums are suckers.\nFOL:\tall x. (Vacuum(x) => Suck(x))\nTEXT:\tA plunger is a good vacuum.\nFOL:\tPlunger(x) & Good(x) => Vacuum(x)\nTEXT:\tAll good things are good vacuums.\nFOL:\tall x. (Good(x) => Vacuum(x))\nTEXT:\tA vacuum is either a plunger or is a good vacuum.\nFOL:\t(Plunger(x) | Good(x)) => Vacuum"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nMike is an international student.\nMike needs to apply for CPT if he wants to work in the US.\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tInternational students in US have either an F1 visa or a J1 visa.\nFOL:\t((F1visa(x) & -J1visa(x)) | (-F1visa(x) & J1visa(x)))\nTEXT:\tAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL:\t(all x. (InternationalStudent(x) & F1visa(x) & (-or(-CPT(x), -OPT(x))) & -WantToWork(x, US) -> (-CPT(x) | -OPT(x))))\nTEXT:\tMike is an international student.\nFOL:\tInternationalStudent(Mike)\nTEXT:\tMike needs to apply for CPT if he wants to work in the US.\nFOL:\t(all x. (InternationalStudent(x) & WantToWork(x, US) -> CPT(x)))\nTEXT:\tMike has an F1 visa.\nFOL:\tF1visa(Mike)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nNo mass product design is timeless.\nEither Zaha Hadid's design style or Kelly Wearstler's design style.\nAll of Kelly Wearstler's design styles are evocative.\nAll of Kelly Wearstler's design styles are dreamy.\nIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\n</PREMISES>\n<CONCLUSION>\nA design by Max is a mass product design.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (Timeless(x) -> ZahaHadidDesign(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\t-all x. (Timeless(x) -> MassProductDesign(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\t((ZahaHadidDesign(Design) & -KellyWearstlerDesign(Design)) | (-ZahaHadidDesign(Design) & KellyWearstlerDesign(Design)))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (Evocative(x) -> KellyWearstlerDesign(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (Dreamy(x) -> KellyWearstlerDesign(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\t((Timeless(Design) -> (MassProductDesign(Design) & Evocative(Design))) & ZahaHadidDesign(Design))\nTEXT:\tA design by Max is a mass product design.\nFOL:\tMassProductDesign(Design)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf a cartoon character is funny, then it is popular.\nIf a cartoon character is ugly, then it is not popular.\nIf a cartoon character is loved by children, then it is funny.\nIf a cartoon character is from The Simpsons, then it is loved by children.\nIf a cartoon character is yellow, then it is from The Simpsons.\nBen is either from The Simpsons or funny.\n</PREMISES>\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (-Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (ChildrenLove(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (FromTheSimpsons(x) -> ChildrenLove(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t((FromTheSimpsons(Ben) & Funny(Ben)) | (-FromTheSimpsons(Ben) & Funny(Ben)))\nTEXT:\tBen is either yellow and ugly or neither yellow nor ugly.\nFOL:\t((Yellow(Ben) & -Ugly(Ben)) | (-Yellow(Ben) & Ugly(Ben))) | (-Yellow(Ben) & Ugly(Ben))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNo one nice to animals is mean to animals.\nSome grumpy people are mean to animals.\nAll animal lovers are nice to animals.\nIf someone owns a pet, then they love animals.\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\nTom is a grumpy person.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\tsome x. (Grumpy(x) & MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. (PetOwner(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tTom is a grumpy person.\nFOL:\tGrumpy(Tom)\n</EVALUATE>\n\n<PREMISES>\nTom is a pet owner.\nAll pet owners are nice to animals.\nIf someone loves animals, then they are a pet owner.\n</PREMISES>\n<CONCLUSION>\nSomeone owns Tom's pet.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tAll pet owners are nice to animals.\nFOL:\tall x. (PetOwner(x) -> NiceToAnimals(x))\nTEXT:\tIf someone loves animals, then they are a pet owner.\nFOL:\tall x. (AnimalLover(x) -> PetOwner(x))\nTEXT:\tSomeone owns Tom's pet.\nFOL:\tsome x. (PetOwner(x) & PetOwner(Tom))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nIf people order takeout frequently in college, then they work in student jobs on campus.\nPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\n</PREMISES>\n<CONCLUSION>\nMary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (EarnMoney(x) -> (NeedMoney(x) & Working(x)))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (Working(x) -> (OrderTakeout(x) & College(x)))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\t(OrderTakeout(People) | EnjoyDiningHallMealsRecipes(People))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tEnjoyDiningHallMealsRecipes(People) -> -PickyEater(People)\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tEnjoyDiningHallMealsRecipes(People) -> (SpendTimeEating(People) & CatchUpFriendsDiningHalls(People))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then M"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals.\nAll animals from Australia are loved by tourists.\nAll quokka are animals from Australia.\nAll of Max's favorite animals are very fluffy.\nAll of Max's favorite animals love to sleep.\nIf a koala is very fluffy, then the koala is not a quokka.\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf animals are loved by tourists, then they are Max's favorite animals.\nFOL:\tall x. ((Loved(x, Tourist) & MaxsFavoriteAnimals(x)) -> MaxsFavoriteAnimals(x))\nTEXT:\tAll animals from Australia are loved by tourists.\nFOL:\tall x. (AnimalFromAustralia(x) & Loved(x, Tourist))\nTEXT:\tAll quokka are animals from Australia.\nFOL:\tall x. (Quokka(x) & AnimalFromAustralia(x))\nTEXT:\tAll of Max's favorite animals are very fluffy.\nFOL:\tall x. (MaxsFavoriteAnimals(x) & VeryFluffy(x))\nTEXT:\tAll of Max's favorite animals love to sleep.\nFOL:\tall x. (MaxsFavoriteAnimals(x) & Sleep(x))\nTEXT:\tIf a koala is very fluffy, then the koala is not a quokka.\nFOL:\t(VeryFluffy(Koala) -> -Quokka(Koala))\nTEXT:\tKoalas love to sleep and are quokka.\nFOL:\t(Sleep(Koala) & Quokka(Koala))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nBillings is a city in Montana.\nMontana includes the cities of Butte, Helena, and Missoula.\nWhite Sulphur Springs and Butte are cities in the same state.\nThe city of Pierre is not in Montana.\nAny city in Butte is not in Pierre.\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tBillings is a city in Montana.\nFOL:\tCity(Billings, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCity(Butte, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCity(Helena, Montana)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCity(Missoula, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\tCity(White Sulphur Springs, Montana)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\tCity(Butte, Montana)\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-City(Pierre, Montana)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\t(-City(Butte, Pierre))\nTEXT:\tPierre and Bismarck are in the same state.\nFOL:\t(City(Pierre, Bismarck))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA man is either kind or evil.\nNo ugly person is handsome.\nAll evil people are ugly.\nAll gentlemen are handsome.\nAll CEOs are gentlemen.\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\nIf Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tA man is either kind or evil.\nFOL:\t(Kind(x) | Evil(x))\nTEXT:\tNo ugly person is handsome.\nFOL:\t-Handsome(x)\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. Evil(x)\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. Gentleman(x)\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tIf Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL:\t((Evil(Harry) & Ugly(Harry)) | (-Evil(Harry) & -Ugly(Harry)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nBeijing is the capital of the People's Republic of China.\nBeijing is the world's most populous national capital city.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\n</PREMISES>\n<CONCLUSION>\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tBeijing is the capital of the People's Republic of China.\nFOL:\tBeijing(capital(People's Republic of China))\nTEXT:\tBeijing is the world's most populous national capital city.\nFOL:\tBeijing(most populous national capital city(world))\nTEXT:\tBeijing is located in Northern China.\nFOL:\tBeijing(located(Northern China))\nTEXT:\tBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL:\tBeijing(hosted(2008 Summer Olympics, 2008 Summer Paralympics Games))\nTEXT:\tBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL:\t(Beijing(hosted(Summer Olympics, Winter Olympics, Summer Paralympics, Winter Paralympics)))\nTEXT:\tMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL:\t(91(University) -> ((Consistently(rank among the best)(in the Asia-Pacific)(and the world))(of Beijing's)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf an animal barks, then Jane does not like it.\nAll dogs are animals that bark.\nIf an animal jumps, then Jane likes it.\nIf an animal has legs, then it jumps.\nIf an animal is terricolous, then it has legs.\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf an animal barks, then Jane does not like it.\nFOL:\tall x. (Barks(x) -> -JaneLoves(x))\nTEXT:\tAll dogs are animals that bark.\nFOL:\tall x. (Dog(x) -> Barks(x))\nTEXT:\tIf an animal jumps, then Jane likes it.\nFOL:\tall x. (Jumps(x) -> JaneLoves(x))\nTEXT:\tIf an animal has legs, then it jumps.\nFOL:\tall x. (HasLegs(x) -> Jumps(x))\nTEXT:\tIf an animal is terricolous, then it has legs.\nFOL:\tall x. (Terricolous(x) -> HasLegs(x))\nTEXT:\tIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL:\t((-Jumps(Kiki) & -HasLegs(Kiki)) | (Terricolous(Kiki) | HasLegs(Kiki)))\nTEXT:\tKiKi is terricolous.\nFOL:\tTerricolous(Kiki)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAilton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazillian footballer who plays for Nautico.\nNautico is a football club along with Braga.\nFluminense is a football club.\n</PREMISES>\n<CONCLUSION>\nNo one playing for Nautico is Brazilian.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAilton(x)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tAilton(x) & FootballPlayer(x) & WasLoanedOut(x, Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tAiltonSilva(x) & Brazilian(x) & Footballer(x) & PlaysFor(x, Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tNautico(x) & FootballClub(x) & AlongWith(x, Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFluminense(x) & FootballClub(x)\nTEXT:\tNo one playing for Nautico is Brazilian.\nFOL:\tall x. (Footballer(x) & PlaysFor(x, Nautico) -> -Brazilian(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nAll airlines can transport multiple passengers.\nAll planes are empty.\nAll Boeing 707s are planes.\nIf Greyhound is not an airline, then there are no Greyhound planes.\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. ((CanTransportMultiplePassengers(x) & -Empty(x)) | (-CanTransportMultiplePassengers(x) & Empty(x)))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(-Airline(Greyhound) & -Boeing707(Greyhound))\nTEXT:\tA Greyhound is a Boeing 707.\nFOL:\t(Boeing707(Greyhound) & Airline(Greyhound))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nNo politicans are part of the Nazi Reichstag.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\t-Democrat(Heinrich Scmidt)\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\t((Democrat(Heeinrich Scmidt) & -Republican(Heeinrich Scmidt)) | (-Democrat(Heeinrich Scmidt) & Republican(Heeinrich Scmidt)))\nTEXT:\tNo politicans are part of the Nazi Reichstag.\nFOL:\t-Republican(Heinrich Scmidt)\n</EVALUATE>\n\n<PREMISES>\nBob likes sports.\nBob likes to watch the tv.\nBob watches the tv.\n</PREMISES>\n<CONCLUSION>\nBob likes to watch the tv.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tBob likes sports.\nFOL:\t-Athlete(Bob)\nTEXT:\tBob likes to watch the tv.\nFOL:\t-Athlete(Bob)\nTEXT:\tBob watches the tv.\nFOL:\tAthlete(Bob)\nTEXT:\tBob likes to watch the tv.\nFOL:\tAthlete(Bob)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAilton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazillian footballer who plays for Nautico.\nNautico is a football club along with Braga.\nFluminense is a football club.\n</PREMISES>\n<CONCLUSION>\nAilton Silva was loaned out to a football club.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAilton(Silva,1995,commonly,Ailton)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tAilton(is,Ailton,football,player,who,was,loaned,out,to,Braga)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tAilton(Silva,is,Brazillian,footballer,who,plays,for,Nautico)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tNautico(is,football,club,along,with,Braga)\nTEXT:\tFluminense is a football club.\nFOL:\tFluminense(is,football,club)\nTEXT:\tAilton Silva was loaned out to a football club.\nFOL:\tAilton(Silva,was,loaned,out,to,a,football,club)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\tBadults(x) :- Sitcom(x), Starring(y,x), Pappy(y)\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tpiloting(Badults,Jul2013,bbc3)\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\ttitle(Badults,\"The Secret Dude Society\")\nTEXT:\tAndrew Collins was the script editor for Badults\nFOL:\tscripted(Badults,AndrewCollins)\nTEXT:\tNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL:\tall x. (Starring(y,x) & Pappy(y) & Piloting(z,z,bbc2) | Piloting(z,z,bbc3))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nAll people who are Grand Slam champions are professional tennis players.\nAll Oscar-nominated actors are celebrities.\nAll professional tennis players are athletes.\nIf a person is a celebrity then they are well paid.\nIf a person is an athlete then they are famous.\nAll well-paid people live in tax havens.\nIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\n</PREMISES>\n<CONCLUSION>\nDjokovic does not live in a tax haven.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\t(GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\t(Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\t(Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t((Famous(Djokovic) & Athlete(Djokovic)) -> LivesInTaxHaven(Djokovic))\nTEXT:\tDjokovic does not live in a tax haven.\nFOL:\t-LivesInTaxHaven(Djokovic)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll squares have four sides.\nAll four-sided things are shapes.\n</PREMISES>\n<CONCLUSION>\nAll squares are shapes.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll squares have four sides.\nFOL:\tall x. (Square(x) -> 4 = count_sides(x))\nTEXT:\tAll four-sided things are shapes.\nFOL:\tall x. (4 = count_sides(x) -> Shape(x))\nTEXT:\tAll squares are shapes.\nFOL:\tall x. (Square(x) -> Shape(x))\n</EVALUATE>\n\n<PREMISES>\nNo empty set is a member of itself.\n</PREMISES>\n<CONCLUSION>\nNo empty set is a set.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo empty set is a member of itself.\nFOL:\tno x. (EmptySet(x) & x = x)\nTEXT:\tNo empty set is a set.\nFOL:\tno x. (EmptySet(x) -> Set(x))\n</EVALUATE>\n\n<PREMISES>\nIf A is a set, then B is also a set.\n</PREMISES>\n<CONCLUSION>\nIf A is a set, then B is a set.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf A is a set, then B is also a set.\nFOL:\tall x. (A(x) -> B(x))\nTEXT:\tIf A is a set, then B is a set.\nFOL:\tall x. (A(x) -> Set(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nYale University is a private Ivy League research university.\nYale University moved to New Haven in 1716.\nYale university's endowment was valued at $42.3 billion.\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\n</PREMISES>\n<CONCLUSION>\nPierson College is a residential college at Yale.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tYale University is a private Ivy League research university.\nFOL:\tYaleUniversity(University, IvyLeague, Research)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\tmoved(University, 1716, NewHaven)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tendowment(University, 42300000000)\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tcolleges(University, Colleges)\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\tresidential_colleges(Colleges, ResidentialColleges)\nTEXT:\tPierson College is a residential college at Yale.\nFOL:\tResidentialColleges(Pierson)\n</"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNo bakery is spicy.\nAll cupcakes are bakeries.\nAll hotpots are spicy.\nAll products of Baked by Melissa are cupcakes.\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. ((BakedByMelissa(x) & Cupcake(x)) | (-BakedByMelissa(x) & -Cupcake(x)))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> ((Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies))))\nTEXT:\tDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL:\t((BakedByMelissa(DriedThaiChilies) & -Bakery(DriedThaiChilies)) | (-BakedByMelissa(DriedThaiChilies) & Bakery(DriedThaiChilies)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll fir trees are evergreens.\nSome objects of worship are fir trees.\n</PREMISES>\n<CONCLUSION>\nSome evergreens are not objects of worship.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll fir trees are evergreens.\nFOL:\tall x. (FirTree(x) -> Evergreen(x))\nTEXT:\tSome objects of worship are fir trees.\nFOL:\tsome x. (ObjectOfWorship(x) -> FirTree(x))\nTEXT:\tSome evergreens are not objects of worship.\nFOL:\tsome x. (Evergreen(x) -> -ObjectOfWorship(x))\n</EVALUATE>\n\n<PREMISES>\nThe USA is not a country.\nThe USA is not an animal.\nThe USA is not a person.\n</PREMISES>\n<CONCLUSION>\nThe USA is a non-organism.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tThe USA is not a country.\nFOL:\t-Country(USA)\nTEXT:\tThe USA is not an animal.\nFOL:\t-Animal(USA)\nTEXT:\tThe USA is not a person.\nFOL:\t-Person(USA)\nTEXT:\tThe USA is a non-organism.\nFOL:\tNonOrganism(USA)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. ((LanguageGeneration(x) & LanguageUnderstanding(x)) | (-LanguageGeneration(x) & -LanguageUnderstanding(x)))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. ((all y. (LanguageGeneration(x) -> TextSequence(y))) -> LanguageGeneration(x))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tall x. (LanguageProcessing(x) -> MachineTranslation(x))\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tall x. (MachineTranslation(x) -> TextSequence(x))\nTEXT:\tMachine translation is a language understanding task.\nFOL:\t-LanguageGeneration(MachineTranslation)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll vehicle registration plates in Istanbul begin with the number 34.\nPlates that do not begin with the number 34 are not from Istanbul.\nJoe's vehicle registration plate is from Istanbul.\nTom's license plate begins with the number 35.\n[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\n</PREMISES>\n<CONCLUSION>\nTom's license plate is from Istanbul.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (VehicleRegistrationPlate(x) & Istanbul(x) & (34 = HeadOf(x)))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-(34 = HeadOf(x)) & Istanbul(x) & -VehicleRegistrationPlate(x))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\tall x. (VehicleRegistrationPlate(x) & Istanbul(x) & -(-(34 = HeadOf(x)) & -Istanbul(x) & VehicleRegistrationPlate(x)))\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\tall x. (LicensePlate(x) & -(-(34 = HeadOf(x)) & Istanbul(x) & LicensePlate(x)))\nTEXT:\t[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. (-(35 = HeadOf(x)) & -(34 = HeadOf(x)))\nTEXT:\tTom's license plate is from Istanbul.\nFOL:\tall x. (LicensePlate(x) & -(-(34 = HeadOf(x)) & Istanbul(x) & LicensePlate(x))) & Istanbul(x)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nIf people chaperone high school dances, then they are not students who attend the school.\nAll people who are inactive and disinterested members of their community chaperone high school dances.\nAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nBonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\n</PREMISES>\n<CONCLUSION>\nIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL:\tall x. ((TalentShows(x) -> Attend(x) & Engaged(x)) & ((Attend(x) & Engaged(x)) -> SchoolEvents(x)))\nTEXT:\tPeople either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL:\t((TalentShows(Person) -> Active(Person)) | ((-TalentShows(Person) -> Inactive(Person) & Disinterested(Person))))\nTEXT:\tIf people chaperone high school dances, then they are not students who attend the school.\nFOL:\tall x. ((Chaperone(x) -> -School(x)) & (-School(x) -> Attend(x)))\nTEXT:\tAll people who are inactive and disinterested members of their community chaperone high school dances.\nFOL:\tall x. ((Inactive(x) & Disinterested(x)) -> Chaperone(x))\nTEXT:\tAll young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL:\tall x. ((((Age(x)"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nAll severe cancers are deadly diseases.\nBile duct cancer is a severe cancer.\nAll Cholangiocarcinoma is bile duct cancer.\nNo one with mild flu has a low survival rate.\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (x is a deadly disease & SurvivalRate(x) is low)\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) is a deadly disease)\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tBileDuctCancer(BileDuctCancer) is a severe cancer\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\tall x. (Cholangiocarcinoma(x) is bile duct cancer)\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tno x. (x has mild flu & SurvivalRate(x) is low)\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\t(ColorectalCancer(ColorectalCancer) is a bile duct cancer & SurvivalRate(ColorectalCancer) is low) -> -BileDuctCancer(ColorectalCancer)\nTEXT:\tColorectal cancer is a severe cancer\nFOL:\tColorectalCancer(ColorectalCancer) is a severe cancer\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nAll students who want to have a long vacation love summer the most.\nEmma's favorite season is summer.\nMia's favorite season is not the same as Emma's.\nJames wants to have a long vacation.\n</PREMISES>\n<CONCLUSION>\nJames's favorite season is summer.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\t[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL:\tSpring -> Summer -> Fall -> Winter\nTEXT:\tAll students who want to have a long vacation love summer the most.\nFOL:\tall x. (Student(x) & WantsVacation(x) & -Love(x, Summer) & Love(x, Spring))\nTEXT:\tEmma's favorite season is summer.\nFOL:\tEmma -> Summer\nTEXT:\tMia's favorite season is not the same as Emma's.\nFOL:\tMia -> -Emma\nTEXT:\tJames wants to have a long vacation.\nFOL:\tJames -> WantsVacation\nTEXT:\tJames's favorite season is summer.\nFOL:\tJames -> Summer\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nIf a Netflix show is popular, Karen will binge-watch it.\nIf and only if Karen binge-watches a Netflix show, she will download it.\nKaren does not download \"Black Mirror\".\n\"Black Mirror\" is a Netflix show.\nIf Karen binge-watches a Netflix show, she will share it to Lisa.\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tNetflix(StrangerThings) & Popular(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\t((Netflix(X) & Popular(X)) -> BingeWatch(Karen,X))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\t((BingeWatch(Karen,X) & Download(Karen,X)) -> (BingeWatch(Karen,X) => Download(Karen,X)))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen,BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflix(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\t((BingeWatch(Karen,X) -> Share(Karen,Lisa,X)) & Netflix(X))\nTEXT:\tKaren will share \"Stranger Things\" to Lisa.\nFOL:\tShare(Karen,Lisa,StrangerThings)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n</PREMISES>\n<CONCLUSION>\nCoco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL:\tall x. (all y. (RankedHighlyByWTA(x) & (ActivePlayersInMajorTennis(y) -> AmongTheMostActivePlayersInMajorTennis(x,y))))\nTEXT:\tEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL:\tall x. (Everyone(x) & (LosingToIgaSwiatek(x) -> RankedHighlyByWTA(x)))\nTEXT:\tAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL:\tall x. (FemaleTennisPlayerAtRolandGarros2022(x) & LosingToIgaSwiatek(x))\nTEXT:\tEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL:\t((FemaleTennisPlayerAtRolandGarros2022(x) & -MaleTennisPlayerAtRolandGarros2022(x)) |"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA man is either kind or evil.\nNo ugly person is handsome.\nAll evil people are ugly.\nAll gentlemen are handsome.\nAll CEOs are gentlemen.\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\nHarry is a CEO.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tA man is either kind or evil.\nFOL:\t((Kind(x) & -Evil(x)) | (-Kind(x) & Evil(x)))\nTEXT:\tNo ugly person is handsome.\nFOL:\tall x. (-Handsome(x) -> -Ugly(x))\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. (Evil(x) -> Ugly(x))\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. (Gentleman(x) -> Handsome(x))\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. (CEO(x) -> Gentleman(x))\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is a CEO.\nFOL:\tCEO(Harry)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll rabbits are cute.\nSome turtles exist.\nAn animal is either a rabbit or a squirrel.\nIf something is skittish, then it is not still.\nAll squirrels are skittish.\nRock is still.\n</PREMISES>\n<CONCLUSION>\nIf Rock is cute and still, then Rock is a turtle and skittish.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\tsome x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\t((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL:\t((Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nIf people order takeout frequently in college, then they work in student jobs on campus.\nPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\n</PREMISES>\n<CONCLUSION>\nMary needs to earn money to help pay for her college tuition.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. ((x = StudentJob & x = NeedToEarn) -> NeedToEarn(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. ((x = OrderTakeout & x = WorkInStudentJob) -> WorkInStudentJob(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\tall x. (((x = OrderTakeout & x = EnjoyDiningHall) | (-x = OrderTakeout & x = EnjoyDiningHall)) -> EnjoyDiningHall(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. ((x = EnjoyDiningHall & -x = PickyEater) -> -PickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. ((x = EnjoyDiningHall & x = LotsOfTimeEating) -> LotsOfTimeEating(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll cows are bovines.\nSome pets are cows.\nIf something is a bovine, then it is domesticated.\nNo domesticated animals are alligators.\nTed is an aligator.\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\tsome x. (Pet(x) -> Cow(x))\nTEXT:\tIf something is a bovine, then it is domesticated.\nFOL:\tsome x. (Bovine(x) -> Domesticated(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tno x. (Domesticated(x) & Alligator(x))\nTEXT:\tTed is an aligator.\nFOL:\tAligator(Ted)\n</EVALUATE>\n\n<PREMISES>\nAll cows are bovines.\nSome pets are cows.\nNo domesticated animals are alligators.\nSome pets are domesticated.\nTed is a domesticated cow.\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll cows are bovines.\nFOL:\tall x. (Cow(x) -> Bovine(x))\nTEXT:\tSome pets are cows.\nFOL:\tsome x. (Pet(x) -> Cow(x))\nTEXT:\tNo domesticated animals are alligators.\nFOL:\tno x. (Domesticated(x) & Alligator(x))\nTEXT:\tSome pets are domesticated.\nFOL:\tsome x. (Pet(x) & Domesticated(x))\nTEXT:\tTed is a domesticated cow.\nFOL:\tDomesticated(Cow(Ted))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nAll people who work regularly and often at home visit the office supply store regularly.\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\n</PREMISES>\n<CONCLUSION>\nRemy visits the office supply store regularly.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. (Owns(x, LargeDesktopMonitor) -> RegularlyWork(x) & OftenWork(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. (FullyStockedAndImpressiveHomeOffice(x) -> Owns(x, LargeDesktopMonitor))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. (RegularlyWork(x) & OftenWork(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. (RegularlyWork(x) & OftenWork(x) -> RegularlyVisitOfficeSupplyStore(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL:\tall x. (SpendFreeTimeTidyingAndOrganizingSpacesInHome(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x))\nTEXT:\tRemy"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\tBreedingBack(x) -> (ArtificialSelection(x) & (DeliberateSelectiveBreeding(x) & (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x) -> (DomesticAnimal(x"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tBadults is a British Sitcom series, starring members of Pappy's.\nFOL:\tBadults = (BritishSitcomSeries & StarringMembersOfPappy's)\nTEXT:\tBadults piloted in July 2013 on BBC Three.\nFOL:\tBadults piloted in July 2013 on BBC Three\nTEXT:\tThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL:\tBadults was also called \"The Secret Dude Society\"\nTEXT:\tAndrew Collins was the script editor for Badults.\nFOL:\tAndrew Collins is the script editor for Badults\nTEXT:\tAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL:\tAndrew Collins is the script editor for (Badults & also called \"The Secret Dude Society\")\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll people who have a wedding are people who have at least one child.\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nSome weddings in July are well-attended.\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\n</PREMISES>\n<CONCLUSION>\nJohn has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> (AtLeastOneChild(x) & People(x)))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (Honeymoon(x) -> (People(x) & Wedding(x)))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (Wedding(x) & July(x) -> (People(x) & Honeymoon(x)))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\tsome x. (Wedding(x) & July(x) -> WellAttended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\t(all x. (AtLeastOneChild(x) & People(John)) -> (-Honeymoon(John) & -Wedding(John)))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(some x. (WellAttended(x) & Wedding(John)) -> (July(x) & (Wedding(x) & People(x)) | (Honeymoon(x) & People"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nSusan flies to LGA airport.\nThe departure and arrival can not be the same airport.\nJohn flies from LGA airport.\n</PREMISES>\n<CONCLUSION>\nJohn flies to LGA airport.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tSusan flies to LGA airport.\nFOL:\tFlies(Susan,LGA)\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\tDeparture(x) & Arrival(x) & (x <> LGA)\nTEXT:\tJohn flies from LGA airport.\nFOL:\tFlies(John,LGA)\nTEXT:\tJohn flies to LGA airport.\nFOL:\tFlies(John,LGA)\n</EVALUATE>\n\n<PREMISES>\nNo flying in bad weather.\nNo flying in strong wind.\nFlying is dangerous.\nFlying is risky.\n</PREMISES>\n<CONCLUSION>\nFlying is dangerous.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo flying in bad weather.\nFOL:\tall x. (Weather(x) & Bad(x) & -Flying(x))\nTEXT:\tNo flying in strong wind.\nFOL:\tall x. (Wind(x) & Strong(x) & -Flying(x))\nTEXT:\tFlying is dangerous.\nFOL:\tall x. (Flying(x) -> Dangerous(x))\nTEXT:\tFlying is risky.\nFOL:\tall x. (Flying(x) -> Risky(x))\nTEXT:\tFlying is dangerous.\nFOL:\tall x. (Flying(x) -> Dangerous(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll Romance languages are Indo-European languages.\nThe Romance languages are a language family.\nAll languages within a language family are related to each other.\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nFrench is an Indo-European language.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (Romance(x) -> IndoEuropean(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\t{Romance(x) : x is a language}\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. (Language(x) -> all y. (Language(y) -> Related(x,y)))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\tall x. (Romance(x) -> (French(x) | Spanish(x)))\nTEXT:\tGerman is related to Spanish.\nFOL:\tall x. (Related(x,Spanish) -> German(x))\nTEXT:\tBasque is not related to any other language.\nFOL:\t-all x. (Related(Basque,x))\nTEXT:\tFrench is an Indo-European language.\nFOL:\tall x. (IndoEuropean(x) -> French(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAilton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazillian footballer who plays for Nautico.\nNautico is a football club along with Braga.\nFluminense is a football club.\n</PREMISES>\n<CONCLUSION>\nAilton Silva foes not play for a football club.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\t(Ailton(Silva) & BornIn(Silva, 1995) & CommonlyKnownAs(Silva, Ailton))\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\t(Ailton(Player) & FootballPlayer(Player) & WasLoanedOut(Player, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\t(Brazillian(Silva) & Footballer(Silva) & PlaysFor(Silva, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\t(Nautico(Club) & FootballClub(Club) & Club(Club, Braga))\nTEXT:\tFluminense is a football club.\nFOL:\t(Fluminense(Club) & FootballClub(Club))\nTEXT:\tAilton Silva foes not play for a football club.\nFOL:\t(PlaysFor(Silva, FootballClub) -> -Ailton(Silva))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA man is either kind or evil.\nNo ugly person is handsome.\nAll evil people are ugly.\nAll gentlemen are handsome.\nAll CEOs are gentlemen.\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\nHarry is kind or a CEO.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tA man is either kind or evil.\nFOL:\t(Kind(x) | Evil(x))\nTEXT:\tNo ugly person is handsome.\nFOL:\t-Handsome(x) => -Ugly(x)\nTEXT:\tAll evil people are ugly.\nFOL:\tall x. Evil(x) -> Ugly(x)\nTEXT:\tAll gentlemen are handsome.\nFOL:\tall x. Gentleman(x) -> Handsome(x)\nTEXT:\tAll CEOs are gentlemen.\nFOL:\tall x. CEO(x) -> Gentleman(x)\nTEXT:\tHarry is a gentleman.\nFOL:\tGentleman(Harry)\nTEXT:\tHarry is kind or a CEO.\nFOL:\t((Kind(Harry) | CEO(Harry)) & -Evil(Harry))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nSome restaurants that do not provide take-out service receive many negative reviews.\nAll restaurants that are popular among local residents have ratings greater than 9.\nSubway has a rating greater than 9 or is popular among local residents.\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\tsome x. (Recommendations(x) & -NegativeReviews(x))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (Rating(x) > 9 & Recommendations(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\tsome x. (-TakeOut(x) & NegativeReviews(x))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. (Residents(x) -> (Rating(x) > 9))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t((Rating(Subway) > 9) | Residents(Subway))\nTEXT:\tIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL:\t((TakeOut(Subway) & NegativeReviews(Subway)) -> ((Rating(Subway) > 9) & (-TakeOut(Subway))))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll Romance languages are Indo-European languages.\nThe Romance languages are a language family.\nAll languages within a language family are related to each other.\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nBasque is a Romance language.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll Romance languages are Indo-European languages.\nFOL:\tall x. (Romance(x) -> IndoEuropean(x))\nTEXT:\tThe Romance languages are a language family.\nFOL:\tall x. (Romance(x) -> LanguageFamily(x))\nTEXT:\tAll languages within a language family are related to each other.\nFOL:\tall x. (LanguageFamily(x) -> (RelatedTo(x, y) => RelatedTo(y, x)))\nTEXT:\tFrench and Spanish are both Romance languages.\nFOL:\t(Romance(French) & Romance(Spanish))\nTEXT:\tGerman is related to Spanish.\nFOL:\tRelatedTo(German, Spanish)\nTEXT:\tBasque is not related to any other language.\nFOL:\t-RelatedTo(Basque, y)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll rabbits are cute.\nSome turtles exist.\nAn animal is either a rabbit or a squirrel.\nIf something is skittish, then it is not still.\nAll squirrels are skittish.\nRock is still.\n</PREMISES>\n<CONCLUSION>\nIf Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\tsome x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\t((Rabbit(Animal) & -Squirrel(Animal)) | (-Rabbit(Animal) & Squirrel(Animal)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tsome x. ((Skittish(x) & -Still(x)) | (-Skittish(x) & Still(x)))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tIf Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL:\t((-Turtle(Rock) & -Squirrel(Rock)) | (Turtle(Rock) & Squirrel(Rock))) -> (Cute(Rock) | Skittish(Rock))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace sucks.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tPlungers suck.\nFOL:\tall x. (Plunger(x) -> Sucks(x))\nTEXT:\tVacuums suck.\nFOL:\tall x. (Vacuum(x) -> Sucks(x))\nTEXT:\tVampires suck.\nFOL:\tall x. (Vampire(x) -> Sucks(x))\nTEXT:\tSpace is a vacuum.\nFOL:\tall x. (Space(x) -> (Vacuum(x) & -Sucks(x)))\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tall x. (Duster(x) -> (HouseholdAppliance(x) & -Sucks(x)))\nTEXT:\tSpace sucks.\nFOL:\t-Sucks(Space)\n</EVALUATE>\n\n</CODE>\n</PRE>\n</BODY>\n</HTML>\n"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nAll people who are Grand Slam champions are professional tennis players.\nAll Oscar-nominated actors are celebrities.\nAll professional tennis players are athletes.\nIf a person is a celebrity then they are well paid.\nIf a person is an athlete then they are famous.\nAll well-paid people live in tax havens.\nIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\n</PREMISES>\n<CONCLUSION>\nDjokovic lives in a tax haven.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL:\t((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT:\tAll people who are Grand Slam champions are professional tennis players.\nFOL:\tall x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT:\tAll Oscar-nominated actors are celebrities.\nFOL:\tall x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT:\tAll professional tennis players are athletes.\nFOL:\tall x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT:\tIf a person is a celebrity then they are well paid.\nFOL:\t(Celebrity(x) -> WellPaid(x))\nTEXT:\tIf a person is an athlete then they are famous.\nFOL:\t(Athlete(x) -> Famous(x))\nTEXT:\tAll well-paid people live in tax havens.\nFOL:\tall x. (WellPaid(x) -> TaxHaven(x))\nTEXT:\tIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL:\t(((Famous(Djokovic) & Athlete(Djokovic)) & WellPaid(Djokovic)) | ((-Famous(Djokovic) & -Athlete(Djokovic)) & -WellPaid(Djokov"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nRoderick Strong leads Diamond Mine.\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nImperium has a feud with Diamond Mine.\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tRoderick Strong is a leader of Diamond Mine.\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tDiamond Mine includes the Creed Brothers and Ivy Nile.\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tImperium is in a feud with Diamond Mine.\nTEXT:\tRoderick strong leads a professional wrestling stable.\nFOL:\tall x. (Strong(x) & ProfessionalWrestlingStable(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nSome restaurants that do not provide take-out service receive many negative reviews.\nAll restaurants that are popular among local residents have ratings greater than 9.\nSubway has a rating greater than 9 or is popular among local residents.\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:\t((If_Restaurant_is_listed_in_Yelp\u2019s_recommendations_then_Restaurant_does_not_receive_many_negative_reviews))\nTEXT:\tAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL:\tall x. (Restaurant(x) & (Rating(x) > 9) -> Recommendation(x))\nTEXT:\tSome restaurants that do not provide take-out service receive many negative reviews.\nFOL:\t((Some_Restaurants_that_do_not_provide_take-out_service_receive_many_negative_reviews))\nTEXT:\tAll restaurants that are popular among local residents have ratings greater than 9.\nFOL:\tall x. ((Local_residents_are_popular(x) & (Rating(x) > 9)))\nTEXT:\tSubway has a rating greater than 9 or is popular among local residents.\nFOL:\t((Subway(x) & ((Rating(x) > 9) | (Local_residents_are_popular(x)))) | (-Subway(x) & (-Local_residents_are_popular(x))))\nTEXT:\tSubway provides take-out service and does not receive many negative reviews.\nFOL:\t((Subway(x) & (Restaurant(x) & (Restaurant_provides_take-out_service(x) & (Restaurant_does_not_receive_many_negative_reviews(x))))))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nRobert Lewandowski is a striker.\n[BG] Strikers are soccer players.\nRobert Lewandowski left Bayern Munchen.\n[BG] If a player left a team they no longer play for that team.\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tRobert Lewandowski is a striker.\nFOL:\tLewandowski(Robert) & SoccerPlayer(Robert)\nTEXT:\t[BG] Strikers are soccer players.\nFOL:\tSoccerPlayer(x) -> SoccerPlayer(y) :- SoccerPlayer(x) & Striker(y)\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\tLewandowski(Robert) & -Team(Robert, Bayern Munchen)\nTEXT:\t[BG] If a player left a team they no longer play for that team.\nFOL:\tPlayer(x) -> -Team(x, y) :- Player(x) & Team(x, y)\nTEXT:\tRobert Lewandowski plays for Bayern Munchen.\nFOL:\tTeam(Robert, Bayern Munchen)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nSome basketball players are not American.\nAll basketball players are tall.\nIf someone is tall, they wear large shoes.\nIf someone wears large shoes, they wear large-sized clothes.\nYuri does not wear large-size clothes.\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tSome basketball players are not American.\nFOL:\tsome x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tif x. (Tall(x) -> LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tif x. (LargeShoes(x) -> LargeSizedClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeSizedClothes(Yuri)\nTEXT:\tIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL:\t((BasketballPlayer(Yuri) & -American(Yuri)) | (-BasketballPlayer(Yuri) & American(Yuri)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tPlungers suck.\nFOL:\tall x. (Plunger(x) -> Suck(x))\nTEXT:\tVacuums suck.\nFOL:\tall x. (Vacuum(x) -> Suck(x))\nTEXT:\tVampires suck.\nFOL:\tall x. (Vampire(x) -> Suck(x))\nTEXT:\tSpace is a vacuum.\nFOL:\tall x. (Vacuum(Space) -> Suck(Space))\nTEXT:\tA duster is a household appliance that doesn't suck.\nFOL:\tall x. (Duster(x) -> (-Suck(x) & HouseholdAppliance(x)))\nTEXT:\tIf something is a household appliance, it sucks.\nFOL:\tall x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nIf a Netflix show is popular, Karen will binge-watch it.\nIf and only if Karen binge-watches a Netflix show, she will download it.\nKaren does not download \"Black Mirror\".\n\"Black Mirror\" is a Netflix show.\nIf Karen binge-watches a Netflix show, she will share it to Lisa.\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tPopular(Stranger Things)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\tall x. (Popular(x) -> BingeWatch(Karen, x))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\tall x. (BingeWatch(Karen, x) -> Download(Karen, x))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, Black Mirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(Black Mirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\tall x. (BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\nTEXT:\tKaren will share \"Black Mirror\" to Lisa.\nFOL:\tShare(Karen, Lisa, Black Mirror)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNo students who work in the library are from the computer science department.\nAll students who have part-time jobs offered by the university are students who work in the library.\nAll students who take the database course are from the computer science department.\nAll students instructed by professor David are taking the database course.\nAll students working in the lab are instructed by professor David.\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJames has a part-time job offered by the university.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tno x. (-WorkInLibrary(x) & FromComputerScienceDepartment(x))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (-PartTimeJob(x) & -FromComputerScienceDepartment(x))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (TakeDatabaseCourse(x) & FromComputerScienceDepartment(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (InstructedByDavid(x) & TakeDatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (WorkInLab(x) & InstructedByDavid(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\t(James(x) & WorkInLab(x))\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t(-PartTimeJob(Jack) & -WorkInLab(Jack))\nTEXT:\tJames has a part-time job offered by the university.\nFOL:\tPartTimeJob(James)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNo bakery is spicy.\nAll cupcakes are bakeries.\nAll hotpots are spicy.\nAll products of Baked by Melissa are cupcakes.\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. ((ProductOf(x, BakedByMelissa) & Cupcake(x)) | (-ProductOf(x, BakedByMelissa) & -Cupcake(x)))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t(((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) & Hotpot(DriedThaiChilies)) | ((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) & Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are a product of Baked by Melissa.\nFOL:\tProductOf(DriedThaiChilies, BakedByMelissa)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll mammals are animals.\nAll monkeys are mammals.\nAn animal is either a monkey or a bird.\nAll birds fly.\nAll animals breathe.\nIf something can fly, then it has wings.\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\n</PREMISES>\n<CONCLUSION>\nRock is a monkey.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\t((Monkey(Animal) & -Bird(Animal)) | (-Monkey(Animal) & Bird(Animal)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Flies(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathes(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Flies(x) -> Wings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((Bird(Rock) & Flies(Rock)) | (-Bird(Rock) & -Flies(Rock))) & ((Bird(Rock) & Breathes(Rock)) | (-Bird(Rock) & -Breathes(Rock)))\nTEXT:\tRock is a monkey.\nFOL:\tMonkey(Rock)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nAll games in the Top 10 list are made by Japanese game companies.\n[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nThe Legend of Zelda sold more than one million copies.\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is in the Top 10 list.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\tJapaneseGameCompany(LegendOfZelda)\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. ((Top10List(x) -> (MadeByJapaneseGameCompany(x) & -JapaneseGameCompany(x))) & MadeByJapaneseGameCompany(x))\nTEXT:\t[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL:\tall x. ((SoldMoreThanOneMillionCopies(x) -> (SelectedIntoTop10List(x) & -NotSelectedIntoTop10List(x))) & SelectedIntoTop10List(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSoldMoreThanOneMillionCopies(LegendOfZelda)\nTEXT:\tThe Legend of Zelda is in the Top 10 list.\nFOL:\tSelectedIntoTop10List(LegendOfZelda)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNo bakery is spicy.\nAll cupcakes are bakeries.\nAll hotpots are spicy.\nAll products of Baked by Melissa are cupcakes.\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo bakery is spicy.\nFOL:\t-Spicy(Bakery)\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t((Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)))\nTEXT:\tDried Thai chilies are a hotpot.\nFOL:\tHotpot(DriedThaiChilies)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nSome affection is love.\nSome love is positive.\n</PREMISES>\n<CONCLUSION>\nSome affection is positive.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tSome affection is love.\nFOL:\tall x. (Affection(x) -> Love(x))\nTEXT:\tSome love is positive.\nFOL:\tall x. (Love(x) -> Positive(x))\nTEXT:\tSome affection is positive.\nFOL:\tall x. (Affection(x) -> Positive(x))\n</EVALUATE>\n\n<PREMISES>\nAll movies are either dramas or comedies.\nNo documentaries are comedies.\nNo dramas are documentaries.\n</PREMISES>\n<CONCLUSION>\nNo documentaries are dramas.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll movies are either dramas or comedies.\nFOL:\tall x. (Movie(x) -> ((Drama(x) & -Comedy(x)) | (-Drama(x) & Comedy(x))))\nTEXT:\tNo documentaries are comedies.\nFOL:\tall x. (-Documentary(x) -> -Comedy(x))\nTEXT:\tNo dramas are documentaries.\nFOL:\tall x. (-Drama(x) -> -Documentary(x))\nTEXT:\tNo documentaries are dramas.\nFOL:\tall x. (-Documentary(x) -> -Drama(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll aliens are extraterrestrial.\nIf someone is from Mars, then they are aliens.\nNo extraterrestrial is human.\nEveryone from Earth is a human.\nMarvin cannot be from Earth and from Mars.\nIf Marvin is not from Earth, then Marvin is an extraterrestrial.\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll aliens are extraterrestrial.\nFOL:\tall x. (Aliens(x) -> Extraterrestrial(x))\nTEXT:\tIf someone is from Mars, then they are aliens.\nFOL:\tsome x. (FromMars(x) -> Aliens(x))\nTEXT:\tNo extraterrestrial is human.\nFOL:\tno x. (Extraterrestrial(x) & Human(x))\nTEXT:\tEveryone from Earth is a human.\nFOL:\tall x. (FromEarth(x) -> Human(x))\nTEXT:\tMarvin cannot be from Earth and from Mars.\nFOL:\t-((FromEarth(Marvin) & FromMars(Marvin)) | (FromEarth(Marvin) & FromMars(Marvin)))\nTEXT:\tIf Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL:\t((-FromEarth(Marvin) & Extraterrestrial(Marvin)) | (FromEarth(Marvin) & -Extraterrestrial(Marvin)))\nTEXT:\tMarvin is neither a human nor from Mars.\nFOL:\t-((Human(Marvin) & -FromMars(Marvin)) | (-Human(Marvin) & FromMars(Marvin)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nIf a Netflix show is popular, Karen will binge-watch it.\nIf and only if Karen binge-watches a Netflix show, she will download it.\nKaren does not download \"Black Mirror\".\n\"Black Mirror\" is a Netflix show.\nIf Karen binge-watches a Netflix show, she will share it to Lisa.\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\t\"Stranger Things\" is a popular Netflix show.\nFOL:\tNetflixShow(StrangerThings) & Popular(StrangerThings)\nTEXT:\tIf a Netflix show is popular, Karen will binge-watch it.\nFOL:\t(Popular(NetflixShow) -> (BingeWatch(Karen, NetflixShow) & Download(Karen, NetflixShow)))\nTEXT:\tIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL:\t((BingeWatch(Karen, NetflixShow) & -Download(Karen, NetflixShow)) -> Download(Karen, NetflixShow))\nTEXT:\tKaren does not download \"Black Mirror\".\nFOL:\t-Download(Karen, BlackMirror)\nTEXT:\t\"Black Mirror\" is a Netflix show.\nFOL:\tNetflixShow(BlackMirror)\nTEXT:\tIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL:\t(BingeWatch(Karen, NetflixShow) -> Share(Karen, NetflixShow, Lisa))\nTEXT:\t\"Black Mirror\" is popular.\nFOL:\tPopular(BlackMirror)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNo digital media are analog.\nEvery printed text is analog.\nAll streaming services are digital.\nIf an object is a hardcover book then it is printed text.\nIf 1984 is a streaming service, then 1984 is a hardcover book.\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo digital media are analog.\nFOL:\tall x. (DigitalMedia(x) -> -Analog(x))\nTEXT:\tEvery printed text is analog.\nFOL:\tall x. (PrintedText(x) -> Analog(x))\nTEXT:\tAll streaming services are digital.\nFOL:\tall x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:\tIf an object is a hardcover book then it is printed text.\nFOL:\tif Paper(x) & Hardcover(x) then PrintedText(x)\nTEXT:\tIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL:\tif StreamingService(1984) then Paper(1984) & Hardcover(1984)\nTEXT:\t1984 is a streaming service.\nFOL:\tStreamingService(1984)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nMonkeypox virus can occur in certain animals, including humans.\nHumans are mammals.\nMammals are animals.\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nPeople feel tired when they get a glu.\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL:\tMonkeypox = disease & by_virus\nTEXT:\tMonkeypox virus can occur in certain animals, including humans.\nFOL:\tMonkeypoxVirus = occurs_in & animal & including & human\nTEXT:\tHumans are mammals.\nFOL:\thuman = mammal\nTEXT:\tMammals are animals.\nFOL:\tmammal = animal\nTEXT:\tSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL:\tSymptons_of_Monkeypox = include & fever & headache & muscle_pains & tired\nTEXT:\tPeople feel tired when they get a glu.\nFOL:\tPeople_feel = tired & when & a & glu\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nAll people who work regularly and often at home visit the office supply store regularly.\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nRemy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\n</PREMISES>\n<CONCLUSION>\nIf Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL:\tall x. ((OwnDesktopMonitor(x) & WorkRegularlyAndOften(x)) -> OwnDesktopMonitor(x))\nTEXT:\tAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL:\tall x. ((OwnDesktopMonitor(x) & FullyStockedAndImpressiveHomeOffice(x)) -> OwnDesktopMonitor(x))\nTEXT:\tAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL:\tall x. ((WorkRegularlyAndOften(x) & SpendFreeTimeTidyingAndOrganizingSpaces(x)) -> WorkRegularlyAndOften(x))\nTEXT:\tAll people who work regularly and often at home visit the office supply store regularly.\nFOL:\tall x. ((WorkRegularlyAndOften(x) & VisitOfficeSupplyStoreRegularly(x)) -> WorkRegularlyAndOften(x))\nTEXT:\tIf people spend their free time tidying and organizing the spaces in their home, then they do"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nSusan flies to LGA airport.\nThe departure and arrival can not be the same airport.\nJohn flies from LGA airport.\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tSusan flies to LGA airport.\nFOL:\tSusan(Flies(LGA_Airport))\nTEXT:\tThe departure and arrival can not be the same airport.\nFOL:\t(DepAirport(x) & ArrAirport(x) & -Same(x,x))\nTEXT:\tJohn flies from LGA airport.\nFOL:\tJohn(Flies(LGA_Airport))\nTEXT:\tSusan flies from LGA airport.\nFOL:\tSusan(Flies(LGA_Airport))\n</EVALUATE>\n\n<PREMISES>\nThere are three cities with the letter `a' in them.\nAll cities that start with `a' have the letter `u' in them.\nAll cities that end with `a' have the letter `b' in them.\nNo city that starts with `b' has the letter `c' in it.\n</PREMISES>\n<CONCLUSION>\nNo city that starts with `b' has the letter `c' in it.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tThere are three cities with the letter `a' in them.\nFOL:\tall x. (City(x) -> (Letter(a) & -Letter(u) & -Letter(b) & -Letter(c)))\nTEXT:\tAll cities that start with `a' have the letter `u' in them.\nFOL:\tall x. (City(x) -> (Letter(a) & Letter(u) & -Letter(b) & -Letter(c)))\nTEXT:\tAll cities that end with `a' have the letter `b' in them.\nFOL:\tall x. (City(x) -> (Letter(b) & Letter(a) & -Letter(u) & -Letter(c)))\nTEXT:\tNo city that starts with `b' has the letter `c' in it.\nFOL:\tall x. (City(x) -> (-Letter(b) & Letter(a) & -Letter(u) & -Letter(c)))\nTEXT:\tNo city that starts with `b'"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nBillings is a city in Montana.\nMontana includes the cities of Butte, Helena, and Missoula.\nWhite Sulphur Springs and Butte are cities in the same state.\nThe city of Pierre is not in Montana.\nAny city in Butte is not in Pierre.\n</PREMISES>\n<CONCLUSION>\nButte and Pierre are in the same state.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tBillings is a city in Montana.\nFOL:\tBillings(City(City)) & City(City) & Montana(State(State)) & State(State)\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\tCity(City) & (Helena(City) | Missoula(City) | Butte(City)) & Montana(State(State)) & State(State)\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\t(WhiteSulphurSprings(City) & Butte(City)) & City(City) & (WhiteSulphurSprings(State) & Butte(State)) & (WhiteSulphurSprings(State) & State(State))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t-Pierre(City) & City(City) & -Montana(State) & State(State)\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\t(Butte(City) & -Pierre(City)) | (-Butte(City) & Pierre(City))\nTEXT:\tButte and Pierre are in the same state.\nFOL:\t(-Butte(City) & -Pierre(City)) | (Butte(City) & Pierre(City)) | (-Butte(City) & Pierre(City)) | (Butte(City) & -Pierre(City))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA podcast is not a novel.\n[BG] If a person is born in American City, the person is American.\n[BG] If a book is novel and it is written by a person, then the person is a novel writer.\nDani Shapiro is an American writer.\nFamily History is written by Dani Shapiro.\nFamily History is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\n[BG] Boston is an American city.\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tA podcast is not a novel.\nFOL:\t-Novel(Podcast)\nTEXT:\t[BG] If a person is born in American City, the person is American.\nFOL:\tall x. (AmericanCity(x) -> American(x))\nTEXT:\t[BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. (Novel(x) -> all y. (Written(x, y) -> -NovelWriter(y)))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWritten(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\t(Novel(FamilyHistory) & (Year(2003) & -Novel(2003, FamilyHistory)))\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tCreated(DaniShapiro, Podcast, FamilySecrets)\nTEXT:\t[BG] Boston is an American city.\nFOL:\tall x. (Boston(x) -> AmericanCity(x))\nTEXT:\tDani Shapiro was born in Boston.\nFOL:\tAmericanCity(Boston, DaniShapiro)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nPets are allowed in some managed buildings.\n[BG] A deposit is required to rent an apartment in a managed building.\nThe security deposit can be either equal to one month's rent or more.\nFluffy is Tom's cat.\nCats are pets.\nThe Olive Garden is a managed building.\nThe monthly rent at the Olive Garden is $2000.\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\n2000$ is more than $1500.\n</PREMISES>\n<CONCLUSION>\nTom is allowed to move in an apartment in The Olive Garden with Fluffy.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tPets are allowed in some managed buildings.\nFOL:\tsome x. (Pet(x) -> ManagedBuilding(x))\nTEXT:\t[BG] A deposit is required to rent an apartment in a managed building.\nFOL:\tall x. (Deposit(x) -> (ManagedBuilding(x) -> (Apartment(x) -> -Required(x))))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tall x. (Deposit(x) -> (ManagedBuilding(x) -> (Apartment(x) -> (OneMonthRent(x) | More(x, x, x)))))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tFluffy = Tom's cat\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tThe Olive Garden = a managed building\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\t2000$ = the monthly rent at the Olive Garden\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tall x. (Apartment(x) -> (ManagedBuilding(x) -> (Tom = (Fluffy & (Deposit(x) -> (OneMonthRent(x) | More(x, x, x))))) & (Deposit(x) -> (OneMonthRent(x) |"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nSymphony No. 9 is a music piece.\nComposers write music pieces.\nBeethoven wrote Symphony No. 9.\nVienna Music Society premiered Symphony No. 9.\nVienna Music Society is an orchestra.\nBeethoven leads the Vienna Music Society.\nOrchestras are led by conductors.\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tSymphony No. 9 is a music piece.\nFOL:\tSymphonyNo9(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. (Composer(x) -> -MusicPiece(x))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\t-Composer(Beethoven)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tViennaMusicSociety(ViennaMusicSociety)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tViennaMusicSociety(Orchestra)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tBeethoven(Conductor)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. (Orchestra(x) -> Conductor(x))\nTEXT:\tBeethoven is a composer.\nFOL:\tBeethoven(Composer)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\n[BG] The Olympic games is a sporting event.\nThe last Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo.\n</PREMISES>\n<CONCLUSION>\nThe United States won the most medals in the last Olympic games.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tThe Olympic games is a sporting event.\nFOL:\t-OlympicGames(x)\nTEXT:\tThe last Olympic games was in Tokyo.\nFOL:\t(OlympicGames(x) & Tokyo(x))\nTEXT:\tThe United States won the most medals in Tokyo.\nFOL:\t(UnitedStates(x) & (Medal(x) & Tokyo(x)))\nTEXT:\tThe United States won the most medals in the last Olympic games.\nFOL:\t(UnitedStates(x) & ((Medal(x) & OlympicGames(y)) & (OlympicGames(y) & Tokyo(z))))\n</EVALUATE>\n\n<PREMISES>\n[BG] All fairies are winged creatures.\nNo fairies are winged creatures.\n</PREMISES>\n<CONCLUSION>\nAll winged creatures are not fairies.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll fairies are winged creatures.\nFOL:\tall x. (Fairy(x) -> WingedCreature(x))\nTEXT:\tNo fairies are winged creatures.\nFOL:\t-all x. (Fairy(x) -> WingedCreature(x))\nTEXT:\tAll winged creatures are not fairies.\nFOL:\tall x. (WingedCreature(x) -> -Fairy(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL:\tBarutinCove(BarutinCove) & (Named(BarutinCove) & Barutin(BarutinCove))\nTEXT:\tBarutin Cove is on the southwest coast of Snow Island.\nFOL:\tBarutinCove(BarutinCove) & (On(BarutinCove, SnowIsland) & Coast(BarutinCove, Southwest))\nTEXT:\tThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL:\t(Islands(SouthShetland) & (SnowIsland(Islands) | GreenwichIsland(Islands) | DeceptionIsland(Islands))) & Islands(SouthShetland)\nTEXT:\tThe South Shetland Islands are considered part of Antarctica.\nFOL:\tIslands(SouthShetland) & PartOf(SouthShetland, Antarctica)\nTEXT:\tIf A is located in B and B is located in C, then A is located in C.\nFOL:\tall x. ((Located(x, y) & Located(y, z)) -> Located(x, z))\nTEXT:\tBarutin is named after all islands in Antarctica.\nFOL:\tall x. (Named(x) -> Islands(x) & PartOf(x, Antarctica))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll rabbits are cute.\nSome turtles exist.\nAn animal is either a rabbit or a squirrel.\nIf something is skittish, then it is not still.\nAll squirrels are skittish.\nRock is still.\n</PREMISES>\n<CONCLUSION>\nRock is a turtle or cute.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\texists y. (TurtlesExist(y))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\t(Rabbit(Animal) | Squirrel(Animal))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle or cute.\nFOL:\t(TurtlesExist(Rock) | Cute(Rock))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nAll airlines can transport multiple passengers.\nAll planes are empty.\nAll Boeing 707s are planes.\nIf Greyhound is not an airline, then there are no Greyhound planes.\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. (Transport(x,y) -> (y!= 0))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (Airline(x) -> Transport(x,y))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> (x = 0))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(((Greyhound!= Airline) -> -Plane(Greyhound)))\nTEXT:\tGreyhound is an airline.\nFOL:\tAirline(Greyhound)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll horses have hooves.\nNo humans have hooves.\n</PREMISES>\n<CONCLUSION>\nSome humans are horses.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll horses have hooves.\nFOL:\tall x. (Horse(x) -> Hooves(x))\nTEXT:\tNo humans have hooves.\nFOL:\tno x. (Human(x) -> Hooves(x))\nTEXT:\tSome humans are horses.\nFOL:\tsome x. (Human(x) -> Horse(x))\n</EVALUATE>\n\n<PREMISES>\nAll females are mammals.\nAll mammals are animals.\nAll females are animals.\n</PREMISES>\n<CONCLUSION>\nAll animals are females.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll females are mammals.\nFOL:\tall x. (Female(x) -> Mammal(x))\nTEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll females are animals.\nFOL:\tall x. (Female(x) -> Animal(x))\nTEXT:\tAll animals are females.\nFOL:\tall x. (Animal(x) -> Female(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNo one nice to animals is mean to animals.\nSome grumpy people are mean to animals.\nAll animal lovers are nice to animals.\nIf someone owns a pet, then they love animals.\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\tsome x. (Grumpy(x) -> MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tsome x. (PetOwner(x) -> AnimalLover(x))\nTEXT:\tTom is a pet owner.\nFOL:\tPetOwner(Tom)\nTEXT:\tTom is not a grumpy person and mean to animals.\nFOL:\t(~Grumpy(Tom) & -MeanToAnimals(Tom))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll students are humans.\nIf someone studies, then they are a student.\nA person either studys or teaches.\nNo young person teaches.\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is a human or a manager.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll students are humans.\nFOL:\tall x. (Student(x) -> Human(x))\nTEXT:\tIf someone studies, then they are a student.\nFOL:\t((Someone(x) & Studies(x)) -> Student(x))\nTEXT:\tA person either studys or teaches.\nFOL:\t((Studies(x) | Teaches(x)) & Human(x))\nTEXT:\tNo young person teaches.\nFOL:\t((Young(x) & Teaches(x)) -> -Human(x))\nTEXT:\tJerry neither teaches nor is a manager.\nFOL:\t(-Teaches(Jerry) & -Manager(Jerry))\nTEXT:\tRose is young or a student.\nFOL:\t((Young(Rose) | Student(Rose)) & Human(Rose))\nTEXT:\tRose is a human or a manager.\nFOL:\t((Human(Rose) | Manager(Rose)) & Human(Rose))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nNo mass product design is timeless.\nEither Zaha Hadid's design style or Kelly Wearstler's design style.\nAll of Kelly Wearstler's design styles are evocative.\nAll of Kelly Wearstler's design styles are dreamy.\nIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\n</PREMISES>\n<CONCLUSION>\nA design by Max is either evocative or dreamy.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (Timeless(x) & ZahaHadid(x))\nTEXT:\tNo mass product design is timeless.\nFOL:\tno x. (Timeless(x) & MassProductDesign(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\t(ZahaHadid(DesignStyle) | KellyWearstler(DesignStyle))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (Evocative(x) & KellyWearstler(x))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (Dreamy(x) & KellyWearstler(x))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\t((Timeless(DesignByMax) -> (MassProductDesign(DesignByMax) & Evocative(DesignByMax))) | (MassProductDesign(DesignByMax) & -Evocative(DesignByMax)))\nTEXT:\tA design by Max is either evocative or dreamy.\nFOL:\t((Evocative(DesignByMax) | Dreamy(DesignByMax)) & (ZahaHadid(DesignByMax) | KellyWearstler(DesignByMax)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nPets are allowed in some managed buildings.\n[BG] A deposit is required to rent an apartment in a managed building.\nThe security deposit can be either equal to one month's rent or more.\nFluffy is Tom's cat.\nCats are pets.\nThe Olive Garden is a managed building.\nThe monthly rent at the Olive Garden is $2000.\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\n2000$ is more than $1500.\n</PREMISES>\n<CONCLUSION>\nThe security deposit at the Olive Garden is either $2000 or more.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tPets are allowed in some managed buildings.\nFOL:\tsome x. (Pets(x) & Managed(x))\nTEXT:\t[BG] A deposit is required to rent an apartment in a managed building.\nFOL:\tsome x. ((Deposit(x) & Apartment(x) & Managed(x)) -> Required(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tsome x. (((Deposit(x) & Rent(x)) -> (Deposit(x) = (Rent(x) * 1))) | (Deposit(x) > (Rent(x))))\nTEXT:\tFluffy is Tom's cat.\nFOL:\t(Cat(Fluffy) & Owner(Tom, Fluffy))\nTEXT:\tCats are pets.\nFOL:\tall x. (Cat(x) -> Pet(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\t(Managed(OliveGarden))\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\t(Rent(OliveGarden) = 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\t(((Pet(Fluffy) & Owner(Tom, Fluffy)) & Managed(OliveGarden)) & ((Deposit(OliveGarden) = (Rent(OliveGarden) * 1)) | (Deposit(OliveGarden) >"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nSome basketball players are not American.\nAll basketball players are tall.\nIf someone is tall, they wear large shoes.\nIf someone wears large shoes, they wear large-sized clothes.\nYuri does not wear large-size clothes.\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tSome basketball players are not American.\nFOL:\tall x. (Not(x) & BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\t((Tall(x) & WearLargeShoes(x)) -> -Small(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\t((WearLargeShoes(x) -> WearLargeSizedClothes(x)) -> -Small(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-WearLargeSizedClothes(Yuri)\nTEXT:\tYuri is an American basketball player.\nFOL:\tAmerican(Yuri) & BasketballPlayer(Yuri)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL:\t((BreedingBack(x) & ArtificialSelection(x, (SelectiveBreeding(x, DomesticAnimals(x))))) & ((-HeckCattle(x) & -ArtificialSelection(x, (SelectiveBreeding(x, DomesticAnimals(x))))) & (Animals(x) & -HeckCattle(x))))\nTEXT:\tHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL:\t((-ArtificialSelection(x, (SelectiveBreeding(x, DomesticAnimals(x))))) & ((-HeckCattle(x) & -ArtificialSelection(x, (SelectiveBreeding(x, DomesticAnimals(x))))) & (Animals(x) & -HeckCattle(x)))) & ((-Animals(x) & -HeckCattle(x) & -BreedingBack(x) & ArtificialSelection(x, (SelectiveBreeding(x, DomesticAnimals(x))))) & (1920s(x) & Animals(x) & HeckCattle(x) & BreedingBack(x))) & ((BreedingBack(x) & ArtificialSelection(x, (SelectiveBreeding(x, DomesticAnimals(x))))) & ((-HeckCattle(x) & -ArtificialSelection(x, (SelectiveBreeding(x, DomesticAnimals(x))))) & (Animals(x) & -HeckCattle(x))))\nTEXT:\tHeck cattle are animals.\nFOL:\t(Animals(x) & HeckCattle(x))\nTEXT:\t"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nPets are allowed in some managed buildings.\n[BG] A deposit is required to rent an apartment in a managed building.\nThe security deposit can be either equal to one month's rent or more.\nFluffy is Tom's cat.\nCats are pets.\nThe Olive Garden is a managed building.\nThe monthly rent at the Olive Garden is $2000.\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\n2000$ is more than $1500.\n</PREMISES>\n<CONCLUSION>\nTom will rent an apartment in The Olive Garden.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tPets are allowed in some managed buildings.\nFOL:\tsome x. (Pet(x) & ManagedBuilding(x))\nTEXT:\t[BG] A deposit is required to rent an apartment in a managed building.\nFOL:\tsome x. (Deposit(x) & ManagedBuilding(x))\nTEXT:\tThe security deposit can be either equal to one month's rent or more.\nFOL:\tsome x. ((Deposit(x) & (Deposit(x) = (OneMonthRent(x) * 1))) | (Deposit(x) > OneMonthRent(x)))\nTEXT:\tFluffy is Tom's cat.\nFOL:\tTom(Fluffy)\nTEXT:\tCats are pets.\nFOL:\tall x. (Pet(x) -> Cat(x))\nTEXT:\tThe Olive Garden is a managed building.\nFOL:\tManagedBuilding(OliveGarden)\nTEXT:\tThe monthly rent at the Olive Garden is $2000.\nFOL:\tMonthlyRent(OliveGarden, 2000)\nTEXT:\tTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL:\tsome x. (MoveIn(Tom, x, Fluffy) & ((Deposit(x) > 1500) | (Deposit(x) = (OneMonthRent(x) * 1))))\nTEXT:\t2000$ is more than $1500.\nFOL:\t2000 > 1500\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nAll of New Vessel Press's published books are in English.\nNeapolitan Chronicles is a book published by New Vessel Press.\nNeapolitan Chronicles was translated from Italian.\nPalace of Flies is a book published by New Vessel Press.\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tAll x. (PublishingHouse(x) & SpecializesIn(x, English, Translating))\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (PublishedBooks(x, PublishingHouse(NewVesselPress)) & In(x, English))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tBook(NeapolitanChronicles) & PublishedBooks(NeapolitanChronicles, NewVesselPress)\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\t(NeapolitanChronicles translated from Italian)\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tBook(PalaceOfFlies) & PublishedBooks(PalaceOfFlies, NewVesselPress)\nTEXT:\tNeapolitan Chronicles is an English book.\nFOL:\t(NeapolitanChronicles is in English)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\n[BG] Books contain tons of knowledge.\n[BG] When a person reads a book, that person gains knowledge.\n[BG] If a person gains knowledge, they become smarter.\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\t[BG] Books contain tons of knowledge.\nFOL:\tall x. (Books(x) -> Contain(x, knowledge))\nTEXT:\t[BG] When a person reads a book, that person gains knowledge.\nFOL:\tall x. (Reads(x, y) -> Gains(x, knowledge))\nTEXT:\t[BG] If a person gains knowledge, they become smarter.\nFOL:\tall x. (Gains(x, knowledge) -> Becomes(x, smarter))\nTEXT:\tHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL:\tReads(Harry, Walden)\nTEXT:\tWalden contains knowledge.\nFOL:\tContain(Walden, knowledge)\n</EVALUATE>\n\n<PREMISES>\n[BG] Pizza contains toppings.\n[BG] The toppings on a pizza are pepperoni, sausage, mushrooms, and olives.\n[BG] If a person eats pizza, that person will be full.\n[BG] If a person is full, they cannot do anything else.\n[BG] Jerry ate pizza.\n</PREMISES>\n<CONCLUSION>\nJerry was full.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\t[BG] Pizza contains toppings.\nFOL:\tall x. (Pizza(x) -> Contain(x, toppings))\nTEXT:\t[BG] The toppings on a pizza are pepperoni, sausage, mushrooms, and olives.\nFOL:\tall x. (Pizza(x) -> (Contain(x, toppings) & (toppings = pepperoni & toppings = sausage & toppings = mushrooms & toppings = olives)))\nTEXT:\t[BG] If a person eats pizza, that person will be full.\nFOL:\tall x. (Eats(x, Pizza) -> Will"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nAll games in the Top 10 list are made by Japanese game companies.\n[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nThe Legend of Zelda sold more than one million copies.\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tA Japanese game company created the game the Legend of Zelda.\nFOL:\t-European(GameCompany) & -American(GameCompany) & -Australian(GameCompany) & -Indian(GameCompany) & Japanese(GameCompany) & Created(GameCompany, Zelda)\nTEXT:\tAll games in the Top 10 list are made by Japanese game companies.\nFOL:\tall x. (Top10(x) & MadeByJapanese(x))\n[BG]:\tFOL:\tall x. (SellsMillion(x) -> Top10(x))\nTEXT:\tThe Legend of Zelda sold more than one million copies.\nFOL:\tSellsMillion(Zelda)\nTEXT:\tFIFA 22 is made by a Japanese video game company.\nFOL:\tMadeByJapanese(FIFA22)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf George likes music, he wants to compose.\nIf George has access to a program, he can compose.\nIf George can compose and wants to compose, he will compose.\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf George likes music, he wants to compose.\nFOL:\tIf(George likes Music, George wants to Compose)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tIf(George has access to Program, George can Compose)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\tIf(George can Compose & George wants to Compose, George will Compose)\nTEXT:\tIf George likes music and has access to a program, he will compose.\nFOL:\tIf(George likes Music & George has access to Program, George will Compose)\n</EVALUATE>\n\n<PREMISES>\nAll bears are mammals.\nIf a bear is a mammal, it is an animal.\nIf a bear is an animal, it is an animal.\n</PREMISES>\n<CONCLUSION>\nAll bears are animals.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll bears are mammals.\nFOL:\tall x. (Bear(x) -> Mammal(x))\nTEXT:\tIf a bear is a mammal, it is an animal.\nFOL:\tIf(Mammal(x), Animal(x))\nTEXT:\tIf a bear is an animal, it is an animal.\nFOL:\tIf(Animal(x), Animal(x))\nTEXT:\tAll bears are animals.\nFOL:\tall x. (Bear(x) -> Animal(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nSteinhauer participated in the 1992 du Maurier Classic.\nThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of the 1992 du Maurier Classic.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL:\t-Won(1992_du_Maurier_Classic, Steinhauer)\nTEXT:\tSteinhauer participated in the 1992 du Maurier Classic.\nFOL:\tParticipated(Steinhauer, 1992_du_Maurier_Classic)\nTEXT:\tThere was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL:\t(Tie(1992_du_Maurier_Classic) & Belgium_on_Leaderboard(1992_du_Maurier_Classic))\nTEXT:\tDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL:\t(Belgium(Descampe) & On_Leaderboard(Descampe, 1992_du_Maurier_Classic))\nTEXT:\tAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL:\tall x. (On_Leaderboard(x, 1992_du_Maurier_Classic) -> Participated(x, 1992_du_Maurier_Classic))\nTEXT:\tSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL:\t-Won(1992_du_Maurier_"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll people who have a wedding are people who have at least one child.\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nSome weddings in July are well-attended.\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\n</PREMISES>\n<CONCLUSION>\nJohn has at least one child.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. (Wedding(x) -> all y. (ParentOf(y, x) & Number(y, 1)))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. (HoneymoonParis(x) -> Wedding(x))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. (JulyWedding(x) & HoneymoonParis(x) -> Wedding(x))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\tsome x. (JulyWedding(x) & Attended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\t(all y. (ParentOf(y, John) & Number(y, 1)) -> (HoneymoonParis(John) & -Wedding(John)))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\t(Attended(JohnWedding) -> (all x. (JulyWedding(x) & Attended(JohnWedding) -> Wedding(John)) | HoneymoonParis(John)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAilton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazillian footballer who plays for Nautico.\nNautico is a football club along with Braga.\nFluminense is a football club.\n</PREMISES>\n<CONCLUSION>\nAilton was not loaned out to a football club.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tPerson(Ailton)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\tPerson(Ailton)\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\tPerson(Ailton)\nTEXT:\tNautico is a football club along with Braga.\nFOL:\tPerson(Nautico)\nTEXT:\tFluminense is a football club.\nFOL:\tPerson(Fluminense)\nTEXT:\tAilton was not loaned out to a football club.\nFOL:\t-FootballClub(LoanedOutTo(Ailton))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nRobert Lewandowski is a striker.\n[BG] Strikers are soccer players.\nRobert Lewandowski left Bayern Munchen.\n[BG] If a player left a team they no longer play for that team.\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tRobert Lewandowski is a striker.\nFOL:\tStriker(RobertLewandowski)\nTEXT:\tStrikers are soccer players.\nFOL:\tall x. (Striker(x) -> SoccerPlayer(x))\nTEXT:\tRobert Lewandowski left Bayern Munchen.\nFOL:\t-SoccerPlayer(RobertLewandowski)\nTEXT:\tIf a player left a team they no longer play for that team.\nFOL:\tall x. (left(x,y) -> noLongerPlaysFor(x,y))\nTEXT:\tRobert Lewandowski is a soccer player.\nFOL:\tSoccerPlayer(RobertLewandowski)\n</EVALUATE>\n\n<PREMISES>\nAll Mary had was a little lamb.\nMary gave the lamb to Joseph.\nJoseph married Mary.\n</PREMISES>\n<CONCLUSION>\nMary had a little lamb.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll Mary had was a little lamb.\nFOL:\tall x. (MaryHad(x) -> LittleLamb(x))\nTEXT:\tMary gave the lamb to Joseph.\nFOL:\tMaryGave(Mary,Lamb,Joseph)\nTEXT:\tJoseph married Mary.\nFOL:\tJosephMarried(Joseph,Mary)\nTEXT:\tMary had a little lamb.\nFOL:\tMaryHad(Mary,LittleLamb)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA podcast is not a novel.\n[BG] If a person is born in American City, the person is American.\n[BG] If a book is novel and it is written by a person, then the person is a novel writer.\nDani Shapiro is an American writer.\nFamily History is written by Dani Shapiro.\nFamily History is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\n[BG] Boston is an American city.\n</PREMISES>\n<CONCLUSION>\nFamily Secrets is a novel.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tA podcast is not a novel.\nFOL:\t-Novel(Podcast)\nTEXT:\t[BG] If a person is born in American City, the person is American.\nFOL:\tall x. (AmericanCity(x) -> American(x))\nTEXT:\t[BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. (Novel(x) -> (NovelWriter(x) -> x))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tNovelWriter(FamilyHistory)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\t(Novel(FamilyHistory) & writtenIn(2003, FamilyHistory))\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\t((created(DaniShapiro, Podcast) & called(Podcast, FamilySecrets)))\nTEXT:\t[BG] Boston is an American city.\nFOL:\tAmericanCity(Boston)\nTEXT:\tFamily Secrets is a novel.\nFOL:\t(Novel(FamilySecrets) & (writtenIn(2003, FamilySecrets) & NovelWriter(DaniShapiro)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll rabbits are cute.\nSome turtles exist.\nAn animal is either a rabbit or a squirrel.\nIf something is skittish, then it is not still.\nAll squirrels are skittish.\nRock is still.\n</PREMISES>\n<CONCLUSION>\nRock is a turtle.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll rabbits are cute.\nFOL:\tall x. (Rabbit(x) -> Cute(x))\nTEXT:\tSome turtles exist.\nFOL:\tsome x. (Turtle(x))\nTEXT:\tAn animal is either a rabbit or a squirrel.\nFOL:\t((Rabbit(Animal) & -Squirrel(Animal)) | (-Rabbit(Animal) & Squirrel(Animal)))\nTEXT:\tIf something is skittish, then it is not still.\nFOL:\tall x. (Skittish(x) -> -Still(x))\nTEXT:\tAll squirrels are skittish.\nFOL:\tall x. (Squirrel(x) -> Skittish(x))\nTEXT:\tRock is still.\nFOL:\tStill(Rock)\nTEXT:\tRock is a turtle.\nFOL:\tTurtle(Rock)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAilton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazillian footballer who plays for Nautico.\nNautico is a football club along with Braga.\nFluminense is a football club.\n</PREMISES>\n<CONCLUSION>\nAilton Silva played for Fluminense.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAilton Silva, born in 1995, is commonly known as Ailton.\nFOL:\tAilton(Silva, 1995, Ailton)\nTEXT:\tAilton is a football player who was loaned out to Braga.\nFOL:\t(Ailton(x, y, z) & FootballPlayer(x) & LoanedOut(x, Braga))\nTEXT:\tAilton Silva is a Brazillian footballer who plays for Nautico.\nFOL:\t(AiltonSilva(x, y, z) & Brazillian(x) & Footballer(x) & PlaysFor(x, Nautico))\nTEXT:\tNautico is a football club along with Braga.\nFOL:\t(Nautico(x) & (FootballClub(x) & (x = Braga)))\nTEXT:\tFluminense is a football club.\nFOL:\t(Fluminense(x) & FootballClub(x))\nTEXT:\tAilton Silva played for Fluminense.\nFOL:\t(AiltonSilva(x, y, z) & PlayedFor(x, Fluminense))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nRoderick Strong leads Diamond Mine.\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nImperium has a feud with Diamond Mine.\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL:\tDiamond Mine(x) & ProfessionalWrestlingStable(x) & FormedInWWE(x)\nTEXT:\tRoderick Strong leads Diamond Mine.\nFOL:\tRoderickStrong(x) & DiamondMine(x)\nTEXT:\tDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL:\tDiamondMine(x) & Includes(x, [CreedBrothers, IvyNile])\nTEXT:\tImperium has a feud with Diamond Mine.\nFOL:\tImperium(x) & Feud(x, DiamondMine(x))\nTEXT:\tRoderick strong leads the Creed Brothers.\nFOL:\tRoderickStrong(x) & Leads(x, CreedBrothers(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nIf the stock price is volatile, then it is not suitable for a retirement fund.\nSome companies\u2019 stocks are growth companies\u2019 stocks.\nAll mature companies\u2019 stocks are suitable for a retirement fund.\nKO is a mature company\u2019s stock.\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll growth companies\u2019 stocks are volatile.\nFOL:\tall x. (GrowthCompany(x) -> Volatile(x))\nTEXT:\tIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL:\tall x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT:\tSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL:\tall x. (GrowthCompany(y) -> (GrowthCompany(x) & y = x))\nTEXT:\tAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL:\tall x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT:\tKO is a mature company\u2019s stock.\nFOL:\tMatureCompany(KO)\nTEXT:\tKO is a company stock.\nFOL:\tCompanyStock(KO)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll mammals are animals.\nAll monkeys are mammals.\nAn animal is either a monkey or a bird.\nAll birds fly.\nAll animals breathe.\nIf something can fly, then it has wings.\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\n</PREMISES>\n<CONCLUSION>\nRock has wings.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\t((Monkey(Animal) & -Bird(Animal)) | (-Monkey(Animal) & Bird(Animal)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> -Flies(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> -Breathes(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (-Flies(x) -> -(-Wings(x)))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t((-(-Flies(Rock)) & -Bird(Rock)) | (-(-Bird(Rock)) & -Flies(Rock)))\nTEXT:\tRock has wings.\nFOL:\tWings(Rock)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nSome basketball players are not American.\nAll basketball players are tall.\nIf someone is tall, they wear large shoes.\nIf someone wears large shoes, they wear large-sized clothes.\nYuri does not wear large-size clothes.\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tSome basketball players are not American.\nFOL:\tsome x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> (Wears(x, Shoes) -> -Small(Shoes)))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (Wears(x, Shoes) -> (Wears(x, Clothes) -> -Small(Clothes)))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-Wears(Yuri, Clothes)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll humans are mortal.\nAll Greeks are humans.\n</PREMISES>\n<CONCLUSION>\nSome Greeks are mortal.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll humans are mortal.\nFOL:\tall x. (Human(x) -> Mortal(x))\nTEXT:\tAll Greeks are humans.\nFOL:\tall x. (Greek(x) -> Human(x))\nTEXT:\tSome Greeks are mortal.\nFOL:\tall x. (Greek(x) & Mortal(x))\n</EVALUATE>\n\n<PREMISES>\nAll fruit is food.\nAll fruit is not vegetable.\n</PREMISES>\n<CONCLUSION>\nAll vegetable is not food.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll fruit is food.\nFOL:\tall x. (Food(x) -> Fruit(x))\nTEXT:\tAll fruit is not vegetable.\nFOL:\tall x. (Fruit(x) -> -Vegetable(x))\nTEXT:\tAll vegetable is not food.\nFOL:\tall x. (-Vegetable(x) -> -Food(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll employees who schedule a meeting with their customers will appear in the company today.\nEveryone who has lunch in the company schedules meetings with their customers.\nEmployees will either have lunch in the company or have lunch at home.\nIf an employee has lunch at home, then he/she is working remotely from home.\nAll employees who are in other countries work remotely from home.\nNo managers work remotely from home.\nJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\n</PREMISES>\n<CONCLUSION>\nJames does not have lunch in the company.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll employees who schedule a meeting with their customers will appear in the company today.\nFOL:\tall x. (Schedule(x, Meet(x, Customer)) & -NotToday(x))\nTEXT:\tEveryone who has lunch in the company schedules meetings with their customers.\nFOL:\tall x. (Lunch(x, Company) & Schedule(x, Meet(x, Customer)))\nTEXT:\tEmployees will either have lunch in the company or have lunch at home.\nFOL:\t(all x. (Lunch(x, Company) | Lunch(x, Home)) & all y. (Lunch(y, Company) | Lunch(y, Home)))\nTEXT:\tIf an employee has lunch at home, then he/she is working remotely from home.\nFOL:\t(all x. (Lunch(x, Home) -> WorkingRemote(x)) & all y. (Lunch(y, Home) -> WorkingRemote(y)))\nTEXT:\tAll employees who are in other countries work remotely from home.\nFOL:\tall x. (OtherCountry(x) & WorkingRemote(x))\nTEXT:\tNo managers work remotely from home.\nFOL:\t-all x. (Manager(x) & WorkingRemote(x))\nTEXT:\tJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:\t((Manager(James) & -NotToday(James)) | (-Manager(James) & NotToday(James)))\nTEXT:\tJames does not have lunch in the company.\nFOL:\t-all x. (Lunch(x, Company) & James(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll mammals are animals.\nAll monkeys are mammals.\nAn animal is either a monkey or a bird.\nAll birds fly.\nAll animals breathe.\nIf something can fly, then it has wings.\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\n</PREMISES>\n<CONCLUSION>\nRock does not have wings.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll monkeys are mammals.\nFOL:\tall x. (Monkey(x) -> Mammal(x))\nTEXT:\tAn animal is either a monkey or a bird.\nFOL:\t((Monkey(x) & -Bird(x)) | (Bird(x) & -Monkey(x)))\nTEXT:\tAll birds fly.\nFOL:\tall x. (Bird(x) -> Flies(x))\nTEXT:\tAll animals breathe.\nFOL:\tall x. (Animal(x) -> Breathes(x))\nTEXT:\tIf something can fly, then it has wings.\nFOL:\tall x. (Flies(x) -> HasWings(x))\nTEXT:\tIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL:\t(((-Bird(Rock) & -Flies(Rock)) & -Breathes(Rock)) | (Bird(Rock) & Flies(Rock) & Breathes(Rock)))\nTEXT:\tRock does not have wings.\nFOL:\t-HasWings(Rock)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL:\tall x. (NaturalLanguageProcessingTasks(x) -> (GenerationTask(x) | UnderstandingTask(x)))\nTEXT:\tIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL:\tall x. (GenerationTask(x) -> (OutputTextSequence(x) & NaturalLanguageProcessingTasks(x)))\nTEXT:\tMachine translation is a natural language processing task.\nFOL:\tall x. (MachineTranslation(x) -> NaturalLanguageProcessingTasks(x))\nTEXT:\tThe output of machine translation is a text sequence.\nFOL:\tall x. (OutputTextSequence(x) -> MachineTranslation(x))\nTEXT:\tMachine translation is a language generation task.\nFOL:\tGenerationTask(MachineTranslation)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nYale University is a private Ivy League research university.\nYale University moved to New Haven in 1716.\nYale university's endowment was valued at $42.3 billion.\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\n</PREMISES>\n<CONCLUSION>\nYale University has the largest university endowment of any educational institution.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tYale University is a private Ivy League research university.\nFOL:\t-Public(Yale University)\nTEXT:\tYale University moved to New Haven in 1716.\nFOL:\t-Moved(Yale University, New Haven, 1716)\nTEXT:\tYale university's endowment was valued at $42.3 billion.\nFOL:\tEndowment(Yale University) = 423000000000.\nTEXT:\tYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL:\tOrganization(Yale University, [ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, TwelveProfessionalSchools])\nTEXT:\tA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL:\t-ResidentialColleges(Yale University) = [Benjamin Franklin College, Ber"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nMichael is a man who is taller than everyone else in his class.\nIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nPeter is a man who is taller than Michael.\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nMichael cannot block Windy's shooting.\nEvery shooter who can jump when shooting is a great shooter.\n</PREMISES>\n<CONCLUSION>\nWindy is a great shooter.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x y z. ((Man(x) & Man(y) & -Jump(y)) -> ((Taller(x,y) & (Taller(y,z) -> Taller(x,z)))))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tall x y. ((Man(Michael) & (Taller(x,Michael) & Taller(y,Michael))) & (Man(x) & (Not(Taller(x,Michael)) & Not(Taller(y,Michael)))))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x y z. (((Taller(x,y) & (Taller(y,z) -> Taller(x,z))) & Taller(y,z)) -> Taller(x,z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tall x y. ((Man(Peter) & (Taller(x,Peter) & Taller(y,Peter))) & (Man(x) & (Not(Taller(x,Michael)) & Not(Taller(y,Michael)))))\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (CanBlock(Michael,x) -> (Not(Jump(x)) & (Person(x) & -Taller(x,Michael))))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\tCanBlock(Michael,Windy)\nTEXT"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nSome basketball players are not American.\nAll basketball players are tall.\nIf someone is tall, they wear large shoes.\nIf someone wears large shoes, they wear large-sized clothes.\nYuri does not wear large-size clothes.\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tSome basketball players are not American.\nFOL:\tsome x. (BasketballPlayer(x) & -American(x))\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. (BasketballPlayer(x) -> Tall(x))\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tall x. (Tall(x) -> -LargeShoes(x))\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tall x. (-LargeShoes(x) -> -LargeSizedClothes(x))\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeSizedClothes(Yuri)\nTEXT:\tYuri is an American.\nFOL:\t-American(Yuri)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nAll airlines can transport multiple passengers.\nAll planes are empty.\nAll Boeing 707s are planes.\nIf Greyhound is not an airline, then there are no Greyhound planes.\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf something can transport multiple passengers, then they are not empty.\nFOL:\tall x. ((TransportsPassengers(x) -> -Empty(x)) & (x!= Passenger))\nTEXT:\tAll airlines can transport multiple passengers.\nFOL:\tall x. (CanTransportPassengers(x) -> TransportsPassengers(x))\nTEXT:\tAll planes are empty.\nFOL:\tall x. (Plane(x) -> Empty(x))\nTEXT:\tAll Boeing 707s are planes.\nFOL:\tall x. (Boeing707(x) -> Plane(x))\nTEXT:\tIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL:\t(not(IsAirline(Greyhound)) -> (not(Greyhound == Airline) -> no(Boeing707(Greyhound))))\nTEXT:\tA Greyhound is not a Boeing 707.\nFOL:\t(not(Greyhound == Boeing707))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNo students who work in the library are from the computer science department.\nAll students who have part-time jobs offered by the university are students who work in the library.\nAll students who take the database course are from the computer science department.\nAll students instructed by professor David are taking the database course.\nAll students working in the lab are instructed by professor David.\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJack takes the database course.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tall x. (Not((x WorksIn(Library) & x From(ComputerScience)))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (x WorksIn(Library) & x HasPartTimeJobOfferedBy(University))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (x TakingCourse(Database) & x From(ComputerScience))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (x InstructedBy(David) & x TakingCourse(Database))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (x WorksIn(Lab) & x InstructedBy(David))\nTEXT:\tJames is a student working in the lab.\nFOL:\tJames WorksIn(Lab)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t-((Jack HasPartTimeJobOfferedBy(University) & -Jack WorksIn(Lab)) | (Jack HasPartTimeJobOfferedBy(University) & Jack WorksIn(Lab)))\nTEXT:\tJack takes the database course.\nFOL:\tJack TakingCourse(Database)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA podcast is not a novel.\n[BG] If a person is born in American City, the person is American.\n[BG] If a book is novel and it is written by a person, then the person is a novel writer.\nDani Shapiro is an American writer.\nFamily History is written by Dani Shapiro.\nFamily History is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\n[BG] Boston is an American city.\n</PREMISES>\n<CONCLUSION>\nDani Shapiro is a novel writer.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tA podcast is not a novel.\nFOL:\t-Novel(Podcast)\nTEXT:\t[BG] If a person is born in American City, the person is American.\nFOL:\tall x. (Person(x) & ((BornIn(x, AmericanCity) -> American(x)) | (-BornIn(x, AmericanCity))))\nTEXT:\t[BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL:\tall x. (Novel(x) & (WrittenBy(x, y) & y))\nTEXT:\tDani Shapiro is an American writer.\nFOL:\tAmerican(DaniShapiro)\nTEXT:\tFamily History is written by Dani Shapiro.\nFOL:\tWrittenBy(FamilyHistory, DaniShapiro)\nTEXT:\tFamily History is a novel written in 2003.\nFOL:\tall x. (Novel(x) & ((WrittenIn(x, 2003) -> WrittenBy(x, y)) | (-WrittenIn(x, 2003))))\nTEXT:\tDani Shapiro created a podcast called Family Secrets.\nFOL:\tall x. (Podcast(x) & ((CreatedBy(x, y) & y) | (-CreatedBy(x, y))))\nTEXT:\t[BG] Boston is an American city.\nFOL:\tall x. (City(x) & (American(x) -> BornIn(x, Boston)))\nTEXT:\tDani Shapiro is a novel writer.\nFOL:\tall x. (Novel(x) & (Writer(x) & y))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nSymphony No. 9 is a music piece.\nComposers write music pieces.\nBeethoven wrote Symphony No. 9.\nVienna Music Society premiered Symphony No. 9.\nVienna Music Society is an orchestra.\nBeethoven leads the Vienna Music Society.\nOrchestras are led by conductors.\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tSymphony No. 9 is a music piece.\nFOL:\tSymphonyNo9(SymphonyNo9)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. (Composer(x) -> MusicPiece(x))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tBeethoven(Beethoven) & SymphonyNo9(SymphonyNo9)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tViennaMusicSociety(ViennaMusicSociety) & SymphonyNo9(SymphonyNo9)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tViennaMusicSociety(ViennaMusicSociety) & Orchestra(ViennaMusicSociety)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tBeethoven(Beethoven) & -ViennaMusicSociety(ViennaMusicSociety) & -Orchestra(ViennaMusicSociety)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. (Orchestra(x) -> -Conductor(x))\nTEXT:\tSome orchestras premiered music pieces.\nFOL:\t(some x. (Orchestra(x) -> -Conductor(x))) & (some y. (MusicPiece(y) -> -Orchestra(y)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\n[BG] Books contain tons of knowledge.\n[BG] When a person reads a book, that person gains knowledge.\n[BG] If a person gains knowledge, they become smarter.\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\n</PREMISES>\n<CONCLUSION>\nA person who is smarter has gained knowledge.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\t[BG] Books contain tons of knowledge.\nFOL:\tall x. (Books(x) -> TonsOfKnowledge(x))\nTEXT:\t[BG] When a person reads a book, that person gains knowledge.\nFOL:\tall x y. (Reads(x,y) -> GainsKnowledge(y))\nTEXT:\t[BG] If a person gains knowledge, they become smarter.\nFOL:\tall x. (GainsKnowledge(x) -> BecomesSmart(x))\nTEXT:\tHarry read the book \u201cWalden\u201d by <NAME>.\nFOL:\tReads(Harry,WaldenByHenryThoreau)\nTEXT:\tA person who is smarter has gained knowledge.\nFOL:\tall x. (BecomesSmart(x) -> GainsKnowledge(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nEvery rose given out on TV is on the Bachelor.\nEverything on the Bachelor portrays the lives of real people.\nAll shows portraying the lives of real people are reality TV shows.\nBreaking Bad is not a reality TV show.\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tOn some Mondays at 8 pm, roses are given out on TV.\nFOL:\tsome x. ((Monday(x) & Time(8,PM)) & RosesGivenOutOnTV(x))\nTEXT:\tEvery rose given out on TV is on the Bachelor.\nFOL:\tall x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT:\tEverything on the Bachelor portrays the lives of real people.\nFOL:\tall x. (OnTheBachelor(x) -> (PortraysTheLivesOfRealPeople(x) & RealityTVShow(x)))\nTEXT:\tAll shows portraying the lives of real people are reality TV shows.\nFOL:\tall x. (PortraysTheLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT:\tBreaking Bad is not a reality TV show.\nFOL:\t-RealityTVShow(BreakingBad)\nTEXT:\tBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL:\tall x. ((RealityTVShow(BreakingBad) & Monday(x)) & (Time(8,PM) & RosesGivenOutOnTV(x)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nSymphony No. 9 is a music piece.\nComposers write music pieces.\nBeethoven wrote Symphony No. 9.\nVienna Music Society premiered Symphony No. 9.\nVienna Music Society is an orchestra.\nBeethoven leads the Vienna Music Society.\nOrchestras are led by conductors.\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tSymphony No. 9 is a music piece.\nFOL:\tSymphonyNo9(x)\nTEXT:\tComposers write music pieces.\nFOL:\tall x. (MusicPiece(x) -> Composer(x))\nTEXT:\tBeethoven wrote Symphony No. 9.\nFOL:\tBeethoven(x)\nTEXT:\tVienna Music Society premiered Symphony No. 9.\nFOL:\tViennaMusicSociety(x)\nTEXT:\tVienna Music Society is an orchestra.\nFOL:\tViennaMusicSociety(x)\nTEXT:\tBeethoven leads the Vienna Music Society.\nFOL:\tBeethoven(x)\nTEXT:\tOrchestras are led by conductors.\nFOL:\tall x. (Orchestra(x) -> (Conductor(x) -> Leader(x)))\nTEXT:\tBeethoven is not a conductor.\nFOL:\t(-Conductor(Beethoven))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNo one nice to animals is mean to animals.\nSome grumpy people are mean to animals.\nAll animal lovers are nice to animals.\nIf someone owns a pet, then they love animals.\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo one nice to animals is mean to animals.\nFOL:\tall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT:\tSome grumpy people are mean to animals.\nFOL:\tsome x. (GrumpyPerson(x) -> MeanToAnimals(x))\nTEXT:\tAll animal lovers are nice to animals.\nFOL:\tall x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT:\tIf someone owns a pet, then they love animals.\nFOL:\tall x. ((OwnsPet(x) -> AnimalLover(x)))\nTEXT:\tTom is a pet owner.\nFOL:\tOwnsPet(Tom)\nTEXT:\tIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL:\tsome x. ((-GrumpyPerson(Tom) & -MeanToAnimals(Tom)) -> ((-GrumpyPerson(x) & -MeanToAnimals(x)) -> -AnimalLover(x) & -AnimalLover(Tom)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nAll of New Vessel Press's published books are in English.\nNeapolitan Chronicles is a book published by New Vessel Press.\nNeapolitan Chronicles was translated from Italian.\nPalace of Flies is a book published by New Vessel Press.\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL:\tNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nTEXT:\tAll of New Vessel Press's published books are in English.\nFOL:\tall x. (New Vessel Press's published books(x) & English(x))\nTEXT:\tNeapolitan Chronicles is a book published by New Vessel Press.\nFOL:\tNeapolitan Chronicles is a book published by New Vessel Press.\nTEXT:\tNeapolitan Chronicles was translated from Italian.\nFOL:\tNeapolitan Chronicles was translated from Italian.\nTEXT:\tPalace of Flies is a book published by New Vessel Press.\nFOL:\tPalace of Flies is a book published by New Vessel Press.\nTEXT:\tPalace of Flies was translated from Italian.\nFOL:\tPalace of Flies was translated from Italian.\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf a cartoon character is funny, then it is popular.\nIf a cartoon character is ugly, then it is not popular.\nIf a cartoon character is loved by children, then it is funny.\nIf a cartoon character is from The Simpsons, then it is loved by children.\nIf a cartoon character is yellow, then it is from The Simpsons.\nBen is either from The Simpsons or funny.\n</PREMISES>\n<CONCLUSION>\nBen is ugly or yellow.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf a cartoon character is funny, then it is popular.\nFOL:\tall x. (Funny(x) -> Popular(x))\nTEXT:\tIf a cartoon character is ugly, then it is not popular.\nFOL:\tall x. (Ugly(x) -> -Popular(x))\nTEXT:\tIf a cartoon character is loved by children, then it is funny.\nFOL:\tall x. (LovedByChildren(x) -> Funny(x))\nTEXT:\tIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL:\tall x. (Simpsons(x) -> LovedByChildren(x))\nTEXT:\tIf a cartoon character is yellow, then it is from The Simpsons.\nFOL:\tall x. (Yellow(x) -> Simpsons(x))\nTEXT:\tBen is either from The Simpsons or funny.\nFOL:\t((Simpsons(Ben) & -Funny(Ben)) | (-Simpsons(Ben) & Funny(Ben)))\nTEXT:\tBen is ugly or yellow.\nFOL:\t((Ugly(Ben) & -Yellow(Ben)) | (-Ugly(Ben) & Yellow(Ben)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNo bakery is spicy.\nAll cupcakes are bakeries.\nAll hotpots are spicy.\nAll products of Baked by Melissa are cupcakes.\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo bakery is spicy.\nFOL:\tall x. (Bakery(x) -> -Spicy(x))\nTEXT:\tAll cupcakes are bakeries.\nFOL:\tall x. (Cupcake(x) -> Bakery(x))\nTEXT:\tAll hotpots are spicy.\nFOL:\tall x. (Hotpot(x) -> Spicy(x))\nTEXT:\tAll products of Baked by Melissa are cupcakes.\nFOL:\tall x. (Cupcake(ProductOf(BakedByMelissa, x)) -> ProductOf(BakedByMelissa, Cupcake(x)))\nTEXT:\tIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL:\t( (Spicy(DriedThaiChilies) | Bakery(DriedThaiChilies)) -> (Hotpot(DriedThaiChilies) | Spicy(DriedThaiChilies)) )\nTEXT:\tDried Thai chilies are not a product of Baked by Melissa.\nFOL:\t-ProductOf(BakedByMelissa, DriedThaiChilies)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nNo mass product design is timeless.\nEither Zaha Hadid's design style or Kelly Wearstler's design style.\nAll of Kelly Wearstler's design styles are evocative.\nAll of Kelly Wearstler's design styles are dreamy.\nIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\n</PREMISES>\n<CONCLUSION>\nA design by Max is evocative and dreamy.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll of Zaha Hadid's design styles are timeless.\nFOL:\tall x. (Timeless(x) & (ZahaHadid(x) -> DesignStyle(x)))\nTEXT:\tNo mass product design is timeless.\nFOL:\tno x. (Timeless(x) & MassProductDesign(x))\nTEXT:\tEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL:\t((ZahaHadid(DesignStyle) | KellyWearstler(DesignStyle)))\nTEXT:\tAll of Kelly Wearstler's design styles are evocative.\nFOL:\tall x. (Evocative(x) & (KellyWearstler(x) -> DesignStyle(x)))\nTEXT:\tAll of Kelly Wearstler's design styles are dreamy.\nFOL:\tall x. (Dreamy(x) & (KellyWearstler(x) -> DesignStyle(x)))\nTEXT:\tIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL:\tif Timeless(DesignByMax) then (MassProductDesign(DesignByMax) & Evocative(DesignByMax))\nTEXT:\tA design by Max is evocative and dreamy.\nFOL:\tEvocative(DesignByMax) & Dreamy(DesignByMax)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nIf people have siblings who are the same age, then they are twins or triplets.\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\n</PREMISES>\n<CONCLUSION>\nLuke complains often about annoying siblings.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x. (Twin(x) | Triplet(x)) => all y. ((Sibling(x,y) & HangOutWithAndPlayWith(x,y)) | -((Sibling(x,y) & HangOutWithAndPlayWith(x,y))))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x. all y. ((SameAge(x,y) & Sibling(x,y)) -> (Twin(x) | Triplet(x)))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x. (Ally(x) & Complain(x) & Annoying(x)) => all y. ((SameAge(x,y) & Sibling(x,y)) | -((SameAge(x,y) & Sibling(x,y))))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x. (-LiveAtHome(x) & -DevelopStrongBonds(x))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x. (HangOutWithAndPlayWith(x,y) => -LiveAtHome("], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf George likes music, he wants to compose.\nIf George has access to a program, he can compose.\nIf George can compose and wants to compose, he will compose.\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf George likes music, he wants to compose.\nFOL:\tif likes(George, Music) then wants(George, Compose)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tif hasAccessToProgram(George) then can(George, Compose)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\tif (can(George, Compose) & wants(George, Compose)) then will(George, Compose)\nTEXT:\tIf George will not compose, George can not compose.\nFOL:\tif -will(George, Compose) then -can(George, Compose)\n</EVALUATE>\n\n<PREMISES>\nIf George likes music, he wants to compose.\nIf George has access to a program, he can compose.\nIf George can compose and wants to compose, he will compose.\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf George likes music, he wants to compose.\nFOL:\tif likes(George, Music) then wants(George, Compose)\nTEXT:\tIf George has access to a program, he can compose.\nFOL:\tif hasAccessToProgram(George) then can(George, Compose)\nTEXT:\tIf George can compose and wants to compose, he will compose.\nFOL:\tif (can(George, Compose) & wants(George, Compose)) then will(George, Compose)\nTEXT:\tIf George will not compose, George can not compose.\nFOL:\tif -will(George, Compose) then -can(George, Compose)\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll cats are mammals.\nSome pets are not mammals.\n</PREMISES>\n<CONCLUSION>\nNo pets are cats.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll cats are mammals.\nFOL:\tall x. (Cat(x) -> Mammal(x))\nTEXT:\tSome pets are not mammals.\nFOL:\tsome x. (Pet(x) & -Mammal(x))\nTEXT:\tNo pets are cats.\nFOL:\t-some x. (Pet(x) -> Cat(x))\n</EVALUATE>\n\n<PREMISES>\nAll cats are mammals.\nAll mammals are animals.\nAll animals are creatures.\nNo mammals are insects.\nNo animals are fish.\nNo fish are reptiles.\nNo reptiles are amphibians.\nAll creatures are living things.\nSome reptiles are amphibians.\nSome insects are bees.\nSome bees are wasps.\nSome wasps are yellow.\nNo animals are worms.\nAll living things are alive.\nSome worms are dead.\nAll yellow is not red.\n</PREMISES>\n<CONCLUSION>\nAll bees are yellow.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll cats are mammals.\nFOL:\tall x. (Cat(x) -> Mammal(x))\nTEXT:\tAll mammals are animals.\nFOL:\tall x. (Mammal(x) -> Animal(x))\nTEXT:\tAll animals are creatures.\nFOL:\tall x. (Animal(x) -> Creature(x))\nTEXT:\tNo mammals are insects.\nFOL:\tno x. (Mammal(x) -> Insect(x))\nTEXT:\tNo animals are fish.\nFOL:\tno x. (Animal(x) -> Fish(x))\nTEXT:\tNo fish are reptiles.\nFOL:\tno x. (Fish(x) -> Reptile(x))\nTEXT:\tNo reptiles are amphibians.\nFOL:\tno x. (Reptile(x) -> Amphibian(x))\nTEXT:\tAll creatures are living things.\nFOL:\tall x. (Creature(x) -> LivingThing("], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll people who have a wedding are people who have at least one child.\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nSome weddings in July are well-attended.\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\n</PREMISES>\n<CONCLUSION>\nJohn does not have a wedding that is well-attended.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll people who have a wedding are people who have at least one child.\nFOL:\tall x. ((People(x) & Wedding(x)) -> (People(x) & atLeastOneChild(x)))\nTEXT:\tAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL:\tall x. ((People(x) & TravelToParis(x) & Honeymoon(x)) -> (People(x) & Wedding(x)))\nTEXT:\tAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL:\tall x. ((Wedding(x) & July(x)) -> ((Wedding(x) & July(x)) -> People(x)))\nTEXT:\tSome weddings in July are well-attended.\nFOL:\tsome x. ((Wedding(x) & July(x)) -> Attended(x))\nTEXT:\tIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL:\tif ((People(John) & atLeastOneChild(John)) then (((-TravelToParis(John) & -Honeymoon(John)) & -Wedding(John))))\nTEXT:\tIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL:\tif ((People(John) & Attended(John)) then ((People(John) & July(John) & Wedding("], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nBillings is a city in Montana.\nMontana includes the cities of Butte, Helena, and Missoula.\nWhite Sulphur Springs and Butte are cities in the same state.\nThe city of Pierre is not in Montana.\nAny city in Butte is not in Pierre.\n</PREMISES>\n<CONCLUSION>\nMontana is home to the city of Missoula.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tBillings is a city in Montana.\nFOL:\t(City(Billings) & State(Montana))\nTEXT:\tMontana includes the cities of Butte, Helena, and Missoula.\nFOL:\t(State(Montana) & (City(Butte) | City(Helena) | City(Missoula)))\nTEXT:\tWhite Sulphur Springs and Butte are cities in the same state.\nFOL:\t(City(White Sulphur Springs) & (City(Butte) & -State(Montana)))\nTEXT:\tThe city of Pierre is not in Montana.\nFOL:\t(-State(Montana) & City(Pierre))\nTEXT:\tAny city in Butte is not in Pierre.\nFOL:\t(-City(Pierre) & (-City(Butte) -> -City(Pierre)))\nTEXT:\tMontana is home to the city of Missoula.\nFOL:\t(City(Missoula) & -State(Montana))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nAll severe cancers are deadly diseases.\nBile duct cancer is a severe cancer.\nAll Cholangiocarcinoma is bile duct cancer.\nNo one with mild flu has a low survival rate.\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf something is a deadly disease, then its survival rate is low.\nFOL:\tall x. (IsADisease(x) -> SurvivalRate(x,Low))\nTEXT:\tAll severe cancers are deadly diseases.\nFOL:\tall x. (SevereCancer(x) -> IsADisease(x))\nTEXT:\tBile duct cancer is a severe cancer.\nFOL:\tIsADisease(BileDuctCancer)\nTEXT:\tAll Cholangiocarcinoma is bile duct cancer.\nFOL:\t(all x. (Cholangiocarcinoma(x) -> IsADisease(x)) & Cholangiocarcinoma(BileDuctCancer))\nTEXT:\tNo one with mild flu has a low survival rate.\nFOL:\tall x. (HasFlu(x,Mild) & SurvivalRate(x,Low))\nTEXT:\tIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL:\t(IsADisease(BileDuctCancer) & SurvivalRate(BileDuctCancer,Low)) -> -IsADisease(BileDuctCancer)\nTEXT:\tIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL:\t((-IsADisease(BileDuctCancer) & -IsADisease(Ch"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nIf people order takeout frequently in college, then they work in student jobs on campus.\nPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\n</PREMISES>\n<CONCLUSION>\nMary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL:\tall x. (StudentJob(x) -> NeedEarn(x))\nTEXT:\tIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL:\tall x. (OrderTakeout(x) -> StudentJob(x))\nTEXT:\tPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL:\t((OrderTakeout(People) & EnjoyDining(People)) | (-OrderTakeout(People) & EnjoyDining(People)))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL:\tall x. (EnjoyDining(x) -> -PickyEater(x))\nTEXT:\tIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:\tall x. (EnjoyDining(x) -> TimeEating(x))\nTEXT:\tIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nEvents are either happy or sad.\nAt least one event is happy.\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tEvents are either happy or sad.\nFOL:\tall x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT:\tAt least one event is happy.\nFOL:\texists x. (Event(x) & Happy(x))\nTEXT:\tAll events are sad.\nFOL:\tall x. (Event(x) -> Sad(x))\n</EVALUATE>\n\n<PREMISES>\nEvery even number is odd.\nEvery odd number is even.\n</PREMISES>\n<CONCLUSION>\nEvery number is even.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tEvery even number is odd.\nFOL:\tall x. (Even(x) -> Odd(x))\nTEXT:\tEvery odd number is even.\nFOL:\tall x. (Odd(x) -> Even(x))\nTEXT:\tEvery number is even.\nFOL:\tall x. (Number(x) -> Even(x))\n</EVALUATE>\n\n<PREMISES>\nAll numbers are either odd or even.\nEven numbers are odd.\nOdd numbers are even.\n</PREMISES>\n<CONCLUSION>\nAll numbers are even.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll numbers are either odd or even.\nFOL:\tall x. (Number(x) -> (Odd(x) | Even(x)))\nTEXT:\tEven numbers are odd.\nFOL:\tall x. (Even(x) -> Odd(x))\nTEXT:\tOdd numbers are even.\nFOL:\tall x. (Odd(x) -> Even(x))\nTEXT:\tAll numbers are even.\nFOL:\tall x. (Number(x) -> Even(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nAll vehicle registration plates in Istanbul begin with the number 34.\nPlates that do not begin with the number 34 are not from Istanbul.\nJoe's vehicle registration plate is from Istanbul.\nTom's license plate begins with the number 35.\n[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\n</PREMISES>\n<CONCLUSION>\nJoe's license plate begins with the number 34.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll vehicle registration plates in Istanbul begin with the number 34.\nFOL:\tall x. (VehicleRegistrationPlate(x) & Istanbul(x) & (34=FirstDigit(x)))\nTEXT:\tPlates that do not begin with the number 34 are not from Istanbul.\nFOL:\tall x. (-(VehicleRegistrationPlate(x) & Istanbul(x) & (34=FirstDigit(x))))\nTEXT:\tJoe's vehicle registration plate is from Istanbul.\nFOL:\t(VehicleRegistrationPlate(Joe's Plate) & Istanbul(Joe's Plate))\nTEXT:\tTom's license plate begins with the number 35.\nFOL:\t(VehicleRegistrationPlate(Tom's Plate) & (35=FirstDigit(Tom's Plate)))\nTEXT:\tIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:\tall x. ((35=FirstDigit(x)) & (-(34=FirstDigit(x))))\nTEXT:\tJoe's license plate begins with the number 34.\nFOL:\t(VehicleRegistrationPlate(Joe's Plate) & (34=FirstDigit(Joe's Plate)))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nIf people have siblings who are the same age, then they are twins or triplets.\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\n</PREMISES>\n<CONCLUSION>\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL:\tall x y. (Twin(x,y) & ((-SameAge(x,y) & -SameAge(y,x)) | (SameAge(x,y) & -SameAge(y,x))))\nTEXT:\tIf people have siblings who are the same age, then they are twins or triplets.\nFOL:\tall x y. (Twin(x,y) & ((-SameAge(x,y) & SameAge(y,x)) | (-SameAge(x,y) & -SameAge(y,x))))\nTEXT:\tIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL:\tall x y. (SameAge(x,y) & Complain(x) & Annoying(y))\nTEXT:\tIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:\tall x y. (SameHome(x,y) -> -StrongBond(x,y))\nTEXT:\tIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL:\tall x y. (SameHome(x,y) & TimeHangingOut(x,y) & -TimeHangingOut(y,x))\nTEXT:\tLuke is either both a t"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nMichael is a man who is taller than everyone else in his class.\nIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nPeter is a man who is taller than Michael.\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nMichael cannot block Windy's shooting.\nEvery shooter who can jump when shooting is a great shooter.\n</PREMISES>\n<CONCLUSION>\nPeter is shorter than a man in Michael's class.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tIf a man is taller than another man, the taller one can block the other's shooting.\nFOL:\tall x y. (Man(x) & Man(y) & (Taller(x, y) -> CanBlock(x, y)))\nTEXT:\tMichael is a man who is taller than everyone else in his class.\nFOL:\tMichael is a Man who all x. (Man(x) & Taller(Michael, x))\nTEXT:\tIf person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL:\tall x y z. ((Taller(x, y) & Taller(y, z) & -Taller(z, x)) -> Taller(x, z))\nTEXT:\tPeter is a man who is taller than Michael.\nFOL:\tPeter is a Man who Taller(Peter, Michael)\nTEXT:\tMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL:\tall x. (Man(x) & CanBlock(Michael, x) & (Not(Jumping(x)) -> -CanBlock(Michael, x)))\nTEXT:\tMichael cannot block Windy's shooting.\nFOL:\tMichael cannot block Windy's shooting\nTEXT:\tEvery shooter who can jump when shooting is a great shooter.\nFOL:\tall x. (Shooter(x) & CanJump(x) & GreatShooter(x))\nTEXT:\tPeter is shorter than a man in Michael's class.\nFOL:\tnot (Peter is a Man who is Taller(Michael, Person) & Person is in Class(Michael))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tHeinrich Scmidt was a Nazi German politician.\nFOL:\tHeinrich Scmidt is a Nazi German politician.\nTEXT:\tHeeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL:\tHeeinrich Scmidt is a member of the Prussian State Parliament and the Nazi Reichstag.\nTEXT:\tSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL:\t(All x. (Nazi German politician(x) & (Prussian State Parliament(x) & Nazi Reichstag(x))))\n</EVALUATE>\n\n<PREMISES>\nAll eagles are birds.\nSome birds are eagles.\nSome birds are not eagles.\n</PREMISES>\n<CONCLUSION>\nThere are some birds that are not eagles.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll eagles are birds.\nFOL:\tall x. (Eagle(x) -> Bird(x))\nTEXT:\tSome birds are eagles.\nFOL:\tsome x. (Bird(x) & Eagle(x))\nTEXT:\tSome birds are not eagles.\nFOL:\tsome x. (Bird(x) & -Eagle(x))\nTEXT:\tThere are some birds that are not eagles.\nFOL:\tThere is some x. (Bird(x) & -Eagle(x))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nSome basketball players are not American.\nAll basketball players are tall.\nIf someone is tall, they wear large shoes.\nIf someone wears large shoes, they wear large-sized clothes.\nYuri does not wear large-size clothes.\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tSome basketball players are not American.\nFOL:\tsome x. -American(x)\nTEXT:\tAll basketball players are tall.\nFOL:\tall x. Tall(x)\nTEXT:\tIf someone is tall, they wear large shoes.\nFOL:\tif Tall(x) then LargeShoes(x)\nTEXT:\tIf someone wears large shoes, they wear large-sized clothes.\nFOL:\tif LargeShoes(x) then LargeSizedClothes(x)\nTEXT:\tYuri does not wear large-size clothes.\nFOL:\t-LargeSizedClothes(Yuri)\nTEXT:\tIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL:\t((LargeShoes(Yuri) & -Tall(Yuri)) -> -American(Yuri))\n</EVALUATE>"], ["The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions, so that the expressions can be evaluated by a theorem solver to determine whether the conclusion follows from the premises.\nExpressions should be adhere to the format of the Python NLTK package logic module.\n\n\n<PREMISES>\nAll dispensable things are environment-friendly.\nAll woodware is dispensable.\nAll paper is woodware.\nNo good things are bad.\nAll environment-friendly things are good.\nA worksheet is either paper or is environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not dispensable.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tAll dispensable things are environment-friendly.\nFOL:\tall x. (Dispensable(x) -> EnvironmentFriendly(x))\nTEXT:\tAll woodware is dispensable.\nFOL:\tall x. (Woodware(x) -> Dispensable(x))\nTEXT:\tAll paper is woodware.\nFOL:\tall x. (Paper(x) -> Woodware(x))\nTEXT:\tNo good things are bad.\nFOL:\tall x. (Good(x) -> -Bad(x))\nTEXT:\tAll environment-friendly things are good.\nFOL:\tall x. (EnvironmentFriendly(x) -> Good(x))\nTEXT:\tA worksheet is either paper or is environment-friendly.\nFOL:\t((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT:\tA worksheet is not dispensable.\nFOL:\t-Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nNo students who work in the library are from the computer science department.\nAll students who have part-time jobs offered by the university are students who work in the library.\nAll students who take the database course are from the computer science department.\nAll students instructed by professor David are taking the database course.\nAll students working in the lab are instructed by professor David.\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJames does not have a part-time job offered by the university.\n</CONCLUSION>\n<EVALUATE>\nTEXT:\tNo students who work in the library are from the computer science department.\nFOL:\tno x. (ComputerScience(x) & (x works in the library))\nTEXT:\tAll students who have part-time jobs offered by the university are students who work in the library.\nFOL:\tall x. (UniversityJobs(x) & (x works in the library))\nTEXT:\tAll students who take the database course are from the computer science department.\nFOL:\tall x. (DatabaseCourse(x) & ComputerScience(x))\nTEXT:\tAll students instructed by professor David are taking the database course.\nFOL:\tall x. (David(x) & DatabaseCourse(x))\nTEXT:\tAll students working in the lab are instructed by professor David.\nFOL:\tall x. (x works in the lab & David(x))\nTEXT:\tJames is a student working in the lab.\nFOL:\tJames(x) & (x works in the lab)\nTEXT:\tJack neither has a part-time job offered by the university nor works in the lab.\nFOL:\t(-UniversityJobs(Jack) & -x works in the lab)\n</EVALUATE>"]]